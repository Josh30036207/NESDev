;
; File generated by cc65 v 2.19 - Git bb1b5c3
;
	.fopt		compiler,"cc65 v 2.19 - Git bb1b5c3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "game.c", 16155, 1710761144
	.dbg		file, "LIB/neslib.h", 9196, 1701627949
	.dbg		file, "LIB/nesdoug.h", 6756, 1701627949
	.dbg		file, "sprites.h", 3425, 1710758365
	.dbg		file, "game.h", 2949, 1710759167
	.dbg		file, "BG/maps.c", 10917, 1710759658
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "rand8", "00", extern, "_rand8"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "check_collision", "00", extern, "_check_collision"
	.dbg		sym, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg		sym, "set_scroll_y", "00", extern, "_set_scroll_y"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "set_data_pointer", "00", extern, "_set_data_pointer"
	.dbg		sym, "set_mt_pointer", "00", extern, "_set_mt_pointer"
	.dbg		sym, "buffer_1_mt", "00", extern, "_buffer_1_mt"
	.dbg		sym, "buffer_4_mt", "00", extern, "_buffer_4_mt"
	.dbg		sym, "flush_vram_update2", "00", extern, "_flush_vram_update2"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_upSprite
	.export		_downSprite
	.export		_leftSprite
	.export		_rightSprite
	.export		_upAttSprite
	.export		_downAttSprite
	.export		_leftAttSprite
	.export		_rightAttSprite
	.export		_upSwd
	.export		_rightSwd
	.export		_rollSprite
	.export		_hollowSprite
	.export		_winSpr
	.export		_fireSpr
	.export		_wolfL
	.export		_wolfR
	.export		_null
	.export		_srdU
	.export		_srdD
	.export		_srdR
	.export		_srdL
	.export		_paletteBg
	.export		_paletteSp
	.export		_mapTiles
	.export		_map0
	.export		_map1
	.export		_map2
	.export		_map3
	.export		_map4
	.export		_map5
	.export		_map6
	.export		_map7
	.export		_map8
	.export		_fireRoom
	.export		_wolfRoom
	.export		_map11
	.export		_map12
	.export		_wolfRoomOpn
	.export		_worldMap
	.export		_eMap
	.export		_iMap
	.export		_center
	.export		_mapPos
	.export		_itmPrs
	.export		_mapWidth
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_text
	.export		_winTxt
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_playerSprite
	.export		_swordSpr
	.export		_i
	.export		_j
	.export		_health
	.export		_stamina
	.export		_maxHealth
	.export		_maxStam
	.export		_regenTimer
	.export		_timerSpeed
	.export		_iFrame
	.export		_loop
	.export		_roll
	.export		_rHVal
	.export		_rVVal
	.export		_dir
	.export		_canMove
	.export		_flasks
	.export		_swdTime
	.export		_canLeave
	.export		_respawnPos
	.export		_knight
	.export		_sword
	.export		_numberOfE
	.export		_bossType
	.export		_E
	.export		_tempE
	.export		_bonfire
	.export		_winBlock
	.export		_wolf
	.export		_wolfSpr
	.export		_wolfCharge
	.export		_wolfChX
	.export		_wolfChY
	.export		_dx
	.export		_dy
	.export		_squ
	.export		_c_map
	.export		_All_Collision_Maps
	.export		_drawSprites
	.export		_move
	.export		_testCollision
	.export		_draw_bg
	.export		_bgCollision
	.export		_loadEnemyData
	.export		_updateHealth
	.export		_loseCheck
	.export		_nextRoom
	.export		_clearScreen
	.export		_win
	.export		_loadRoomData
	.export		_updateStamina
	.export		_selBtn
	.export		_stBtn
	.export		_aBtn
	.export		_bBtn
	.export		_eBgCol
	.export		_wait
	.export		_eMove
	.export		_wolfMove
	.export		_rest
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_posChk
	.export		_pause
	.export		_main

.segment	"DATA"

_mapTiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$84
	.byte	$93
	.byte	$94
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$01
_worldMap:
	.byte	$00
	.byte	$0B
	.byte	$05
	.byte	$0A
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
_eMap:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$57
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_itmPrs:
	.word	$0003
_mapWidth:
	.word	$0005
_text:
	.byte	$59,$6F,$75,$20,$44,$69,$65,$64,$00
_winTxt:
	.byte	$59,$6F,$75,$20,$57,$69,$6E,$00
_health:
	.word	$0008
_stamina:
	.word	$0008
_maxHealth:
	.word	$0008
_maxStam:
	.word	$0008
_timerSpeed:
	.word	$0046
_iFrame:
	.word	$0000
_loop:
	.word	$0001
_roll:
	.word	$0000
_rHVal:
	.word	$0000
_rVVal:
	.word	$0000
_dir:
	.word	$0003
_canMove:
	.word	$0001
_flasks:
	.word	$0003
_swdTime:
	.word	$0005
_canLeave:
	.word	$0001
_respawnPos:
	.word	$0000
_knight:
	.byte	$78
	.byte	$5E
	.byte	$0F
	.byte	$0F
_sword:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$0F
_numberOfE:
	.word	$0003
_bonfire:
	.byte	$78
	.byte	$70
	.byte	$0F
	.byte	$07
_winBlock:
	.byte	$78
	.byte	$70
	.byte	$0F
	.byte	$07
_wolf:
	.byte	$78
	.byte	$64
	.byte	$20
	.byte	$18
	.word	$000A
	.word	$000A
_wolfSpr:
	.addr	_wolfL
_wolfCharge:
	.word	$0032
_posChk:
	.word	$0000
_pause:
	.word	$0000

.segment	"RODATA"

_upSprite:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_downSprite:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_leftSprite:
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$40
	.byte	$80
_rightSprite:
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$80
_upAttSprite:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_downAttSprite:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_leftAttSprite:
	.byte	$08
	.byte	$00
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$40
	.byte	$80
_rightAttSprite:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$00
	.byte	$80
_upSwd:
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$80
_rightSwd:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_rollSprite:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_hollowSprite:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_winSpr:
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$82
	.byte	$02
	.byte	$80
_fireSpr:
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$92
	.byte	$02
	.byte	$80
_wolfL:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$17
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$29
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$2A
	.byte	$00
	.byte	$17
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$80
_wolfR:
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$1B
	.byte	$40
	.byte	$18
	.byte	$10
	.byte	$28
	.byte	$40
	.byte	$10
	.byte	$10
	.byte	$29
	.byte	$40
	.byte	$08
	.byte	$10
	.byte	$2A
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$2B
	.byte	$40
	.byte	$80
_null:
	.byte	$80
_srdU:
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$80
_srdD:
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$80
	.byte	$80
_srdR:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_srdL:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$40
	.byte	$80
_paletteBg:
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$16
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSp:
	.byte	$25
	.byte	$00
	.byte	$0C
	.byte	$07
	.byte	$0F
	.byte	$16
	.byte	$19
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$07
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
_map0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_fireRoom:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_wolfRoom:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
_map11:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map12:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_wolfRoomOpn:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
_iMap:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_center:
	.word	$000C
_All_Collision_Maps:
	.addr	_map0
	.addr	_map1
	.addr	_map2
	.addr	_map3
	.addr	_map4
	.addr	_map5
	.addr	_map6
	.addr	_map7
	.addr	_map8
	.addr	_fireRoom
	.addr	_wolfRoom
	.addr	_map11
	.addr	_map12
	.addr	_wolfRoomOpn

.segment	"BSS"

_mapPos:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_playerSprite:
	.res	2,$00
_swordSpr:
	.res	2,$00
_i:
	.res	2,$00
_j:
	.res	2,$00
_regenTimer:
	.res	2,$00
_bossType:
	.res	1,$00
_E:
	.res	12,$00
_tempE:
	.res	12,$00
_wolfChX:
	.res	2,$00
_wolfChY:
	.res	2,$00
_dx:
	.res	2,$00
_dy:
	.res	2,$00
_squ:
	.res	2,$00
_c_map:
	.res	240,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

	.dbg	func, "drawSprites", "00", extern, "_drawSprites"

.segment	"CODE"

;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "game.c", 134
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	.dbg	line, "game.c", 136
	jsr     _oam_clear
;
; bank_spr(1);//switch to player spritesheet
;
	.dbg	line, "game.c", 137
	lda     #$01
	jsr     _bank_spr
;
; {oam_meta_spr(knight.x, knight.y, playerSprite);}
;
	.dbg	line, "game.c", 140
	jsr     decsp2
	lda     _knight
	ldy     #$01
	sta     (sp),y
	lda     _knight+1
	dey
	sta     (sp),y
	lda     _playerSprite
	ldx     _playerSprite+1
	jsr     _oam_meta_spr
;
; oam_meta_spr(sword.x, sword.y, swordSpr);
;
	.dbg	line, "game.c", 141
	jsr     decsp2
	lda     _sword
	ldy     #$01
	sta     (sp),y
	lda     _sword+1
	dey
	sta     (sp),y
	lda     _swordSpr
	ldx     _swordSpr+1
	jsr     _oam_meta_spr
;
; if( which_bg == 13 && wolf.health <= 0){//which_bg == 13 is temp as only 1 boss
;
	.dbg	line, "game.c", 143
	lda     _which_bg
	cmp     #$0D
	bne     L0013
	lda     _wolf+4
	ora     _wolf+4+1
	bne     L0013
;
; oam_meta_spr(winBlock.x, winBlock.y , winSpr);
;
	.dbg	line, "game.c", 144
	jsr     decsp2
	lda     _winBlock
	ldy     #$01
	sta     (sp),y
	lda     _winBlock+1
	dey
	sta     (sp),y
	lda     #<(_winSpr)
	ldx     #>(_winSpr)
	jsr     _oam_meta_spr
;
; else if(bossType == 'W'){
;
	.dbg	line, "game.c", 146
	jmp     L000B
L0013:	lda     _bossType
	cmp     #$57
	bne     L0014
;
; oam_meta_spr(wolf.x, wolf.y , wolfSpr);
;
	.dbg	line, "game.c", 147
	jsr     decsp2
	lda     _wolf
	ldy     #$01
	sta     (sp),y
	lda     _wolf+1
	dey
	sta     (sp),y
	lda     _wolfSpr
	ldx     _wolfSpr+1
	jsr     _oam_meta_spr
;
; else{
;
	.dbg	line, "game.c", 149
	jmp     L000B
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 150
L0014:	lda     #$00
	sta     _i
	sta     _i+1
L000A:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0010
	eor     #$80
L0010:	bpl     L000B
;
; oam_meta_spr(E[i].x, E[i].y , hollowSprite);
;
	.dbg	line, "game.c", 151
	jsr     decsp2
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_hollowSprite)
	ldx     #>(_hollowSprite)
	jsr     _oam_meta_spr
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 150
	inc     _i
	bne     L000A
	inc     _i+1
	jmp     L000A
;
; if(iMap[mapPos] == 1){
;
	.dbg	line, "game.c", 155
L000B:	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_iMap)
	sta     ptr1+1
	ldy     #<(_iMap)
	lda     (ptr1),y
	cmp     #$01
	bne     L000F
;
; oam_meta_spr(bonfire.x, bonfire.y , fireSpr);
;
	.dbg	line, "game.c", 156
	jsr     decsp2
	lda     _bonfire
	ldy     #$01
	sta     (sp),y
	lda     _bonfire+1
	dey
	sta     (sp),y
	lda     #<(_fireSpr)
	ldx     #>(_fireSpr)
	jmp     _oam_meta_spr
;
; }
;
	.dbg	line, "game.c", 159
L000F:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move: near

	.dbg	func, "move", "00", extern, "_move"

.segment	"CODE"

;
; if(roll){
;
	.dbg	line, "game.c", 80
	lda     _roll
	ora     _roll+1
	beq     L0002
;
; knight.x += rHVal;
;
	.dbg	line, "game.c", 81
	lda     _rHVal
	clc
	adc     _knight
	sta     _knight
;
; bgCollision();//cant roll through walls
;
	.dbg	line, "game.c", 84
	jsr     _bgCollision
;
; if(collision_R) knight.x -= 3;
;
	.dbg	line, "game.c", 85
	lda     _collision_R
	beq     L0003
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; if(collision_L) knight.x += 3;
;
	.dbg	line, "game.c", 86
L0003:	lda     _collision_L
	beq     L0004
	lda     #$03
	clc
	adc     _knight
	sta     _knight
;
; knight.y += rVVal;
;
	.dbg	line, "game.c", 88
L0004:	lda     _rVVal
	clc
	adc     _knight+1
	sta     _knight+1
;
; bgCollision();
;
	.dbg	line, "game.c", 89
	jsr     _bgCollision
;
; if(collision_D) knight.y -= 3;
;
	.dbg	line, "game.c", 90
	lda     _collision_D
	beq     L0005
	lda     _knight+1
	sec
	sbc     #$03
	sta     _knight+1
;
; if(collision_U) knight.y += 3;
;
	.dbg	line, "game.c", 91
L0005:	lda     _collision_U
	bne     L001F
;
; }
;
	.dbg	line, "game.c", 131
	rts
;
; if(collision_U) knight.y += 3;
;
	.dbg	line, "game.c", 91
L001F:	lda     #$03
;
; else{
;
	.dbg	line, "game.c", 93
	jmp     L001E
;
; if(pad1 & PAD_LEFT){
;
	.dbg	line, "game.c", 94
L0002:	lda     _pad1
	and     #$02
	beq     L0017
;
; playerSprite = leftSprite;
;
	.dbg	line, "game.c", 95
	lda     #>(_leftSprite)
	sta     _playerSprite+1
	lda     #<(_leftSprite)
	sta     _playerSprite
;
; dir = 4;
;
	.dbg	line, "game.c", 96
	ldx     #$00
	lda     #$04
	sta     _dir
	stx     _dir+1
;
; knight.x -= 2;
;
	.dbg	line, "game.c", 97
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; rHVal = -3;
;
	.dbg	line, "game.c", 98
	dex
	lda     #$FD
;
; else if (pad1 & PAD_RIGHT){
;
	.dbg	line, "game.c", 102
	jmp     L0019
L0017:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0019
;
; playerSprite = rightSprite;
;
	.dbg	line, "game.c", 103
	lda     #>(_rightSprite)
	sta     _playerSprite+1
	lda     #<(_rightSprite)
	sta     _playerSprite
;
; dir = 2;
;
	.dbg	line, "game.c", 104
	lda     #$02
	sta     _dir
	stx     _dir+1
;
; knight.x += 2;
;
	.dbg	line, "game.c", 105
	clc
	adc     _knight
	sta     _knight
;
; rHVal = 3;
;
	.dbg	line, "game.c", 106
	lda     #$03
;
; }else{rHVal = 0;}
;
	.dbg	line, "game.c", 108
L0019:	sta     _rHVal
	stx     _rHVal+1
;
; bgCollision();
;
	.dbg	line, "game.c", 109
	jsr     _bgCollision
;
; if(collision_R) knight.x -= 2;
;
	.dbg	line, "game.c", 110
	lda     _collision_R
	beq     L000C
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; if(collision_L) knight.x += 2;
;
	.dbg	line, "game.c", 111
L000C:	lda     _collision_L
	beq     L000D
	lda     #$02
	clc
	adc     _knight
	sta     _knight
;
; if(pad1 & PAD_UP){
;
	.dbg	line, "game.c", 112
L000D:	lda     _pad1
	and     #$08
	beq     L001A
;
; playerSprite = upSprite;
;
	.dbg	line, "game.c", 113
	lda     #>(_upSprite)
	sta     _playerSprite+1
	lda     #<(_upSprite)
	sta     _playerSprite
;
; dir = 1;
;
	.dbg	line, "game.c", 114
	ldx     #$00
	lda     #$01
	sta     _dir
	stx     _dir+1
;
; knight.y -= 2;
;
	.dbg	line, "game.c", 115
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; rVVal = -3;
;
	.dbg	line, "game.c", 116
	dex
	lda     #$FD
;
; else if (pad1 & PAD_DOWN){
;
	.dbg	line, "game.c", 119
	jmp     L001C
L001A:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L001C
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 120
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; dir = 3;
;
	.dbg	line, "game.c", 121
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; knight.y += 2;
;
	.dbg	line, "game.c", 122
	lda     #$02
	clc
	adc     _knight+1
	sta     _knight+1
;
; rVVal = 3;
;
	.dbg	line, "game.c", 123
	lda     #$03
;
; }else{rVVal = 0; }
;
	.dbg	line, "game.c", 125
L001C:	sta     _rVVal
	stx     _rVVal+1
;
; bgCollision();
;
	.dbg	line, "game.c", 126
	jsr     _bgCollision
;
; if(collision_D) knight.y -= 2;
;
	.dbg	line, "game.c", 127
	lda     _collision_D
	beq     L0012
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; if(collision_U) knight.y += 2;
;
	.dbg	line, "game.c", 128
L0012:	lda     _collision_U
	beq     L0013
	lda     #$02
L001E:	clc
	adc     _knight+1
	sta     _knight+1
;
; }
;
	.dbg	line, "game.c", 131
L0013:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ testCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_testCollision: near

	.dbg	func, "testCollision", "00", extern, "_testCollision"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 162
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L004E
	eor     #$80
L004E:	asl     a
	lda     #$00
	bcc     L0058
;
; collision = check_collision(&knight, &E[i]); 
;
	.dbg	line, "game.c", 163
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 165
	lda     _collision
	beq     L0004
;
; if (iFrame <= 0 && roll == 0){
;
	.dbg	line, "game.c", 168
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvc     L0009
	eor     #$80
L0009:	bpl     L0004
	lda     _roll
	ora     _roll+1
	bne     L0004
;
; health -= 1;
;
	.dbg	line, "game.c", 169
	lda     _health
	sec
	sbc     #$01
	sta     _health
	bcs     L000E
	dec     _health+1
;
; iFrame = 26;
;
	.dbg	line, "game.c", 170
L000E:	ldx     #$00
	lda     #$1A
	sta     _iFrame
	stx     _iFrame+1
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 162
L0004:	inc     _i
	bne     L0002
	inc     _i+1
	jmp     L0002
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 178
L0058:	sta     _i
	sta     _i+1
L000F:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L004F
	eor     #$80
L004F:	asl     a
	lda     #$00
	jcc     L005A
;
; collision = check_collision(&sword, &E[i]); 
;
	.dbg	line, "game.c", 179
	lda     #<(_sword)
	ldx     #>(_sword)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 180
	lda     _collision
	jeq     L0011
;
; for(j = 0; j < numberOfE; j++){//grab a temp copy of the enemy array
;
	.dbg	line, "game.c", 181
	lda     #$00
	sta     _j
	sta     _j+1
L0015:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0050
	eor     #$80
L0050:	bpl     L0016
;
; tempE[j] = E[j];
;
	.dbg	line, "game.c", 182
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_tempE)
	tay
	txa
	adc     #>(_tempE)
	tax
	tya
	jsr     pushax
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
;
; for(j = 0; j < numberOfE; j++){//grab a temp copy of the enemy array
;
	.dbg	line, "game.c", 181
	inc     _j
	bne     L0015
	inc     _j+1
	jmp     L0015
;
; for(j = i; j < numberOfE; j++){
;
	.dbg	line, "game.c", 185
L0016:	lda     _i+1
	sta     _j+1
	lda     _i
	sta     _j
L001A:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0051
	eor     #$80
L0051:	bpl     L001B
;
; E[j] = tempE[j+1];
;
	.dbg	line, "game.c", 186
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	lda     _j
	ldx     _j+1
	clc
	adc     #$01
	bcc     L001F
	inx
L001F:	jsr     aslax2
	clc
	adc     #<(_tempE)
	tay
	txa
	adc     #>(_tempE)
	tax
	tya
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
;
; for(j = i; j < numberOfE; j++){
;
	.dbg	line, "game.c", 185
	inc     _j
	bne     L001A
	inc     _j+1
	jmp     L001A
;
; numberOfE -= 1;
;
	.dbg	line, "game.c", 189
L001B:	lda     _numberOfE
	sec
	sbc     #$01
	sta     _numberOfE
	bcs     L0011
	dec     _numberOfE+1
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 178
L0011:	inc     _i
	jne     L000F
	inc     _i+1
	jmp     L000F
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 195
L005A:	sta     _i
	sta     _i+1
L0021:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0052
	eor     #$80
L0052:	jpl     L0022
;
; for(j = 1; j < numberOfE; j++){
;
	.dbg	line, "game.c", 196
	ldx     #$00
	lda     #$01
	sta     _j
	stx     _j+1
L0026:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0053
	eor     #$80
L0053:	bpl     L0023
;
; collision = check_collision(&E[i], &E[i+j]); 
;
	.dbg	line, "game.c", 197
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	lda     _i
	clc
	adc     _j
	pha
	lda     _i+1
	adc     _j+1
	tax
	pla
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if(collision){
;
	.dbg	line, "game.c", 198
	lda     _collision
	beq     L0028
;
; E[j].y++;//move it down
;
	.dbg	line, "game.c", 199
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; for(j = 1; j < numberOfE; j++){
;
	.dbg	line, "game.c", 196
L0028:	inc     _j
	bne     L0026
	inc     _j+1
	jmp     L0026
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 195
L0023:	inc     _i
	jne     L0021
	inc     _i+1
	jmp     L0021
;
; if(wolf.health <= 0){
;
	.dbg	line, "game.c", 204
L0022:	lda     _wolf+4
	ora     _wolf+4+1
	bne     L005B
;
; collision = check_collision(&knight, &winBlock);
;
	.dbg	line, "game.c", 205
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     #<(_winBlock)
	ldx     #>(_winBlock)
	jsr     _check_collision
	sta     _collision
;
; if (collision){win();}
;
	.dbg	line, "game.c", 206
	lda     _collision
	bne     L0061
;
; }
;
	.dbg	line, "game.c", 250
	rts
;
; if (collision){win();}
;
	.dbg	line, "game.c", 206
L0061:	jmp     _win
;
; if((bossType == 'W') && (wolf.health > 0)){//boss wolf
;
	.dbg	line, "game.c", 208
L005B:	lda     _bossType
	cmp     #$57
	jne     L0030
	lda     _wolf+4
	ora     _wolf+4+1
	jeq     L0030
;
; collision = check_collision(&knight, &wolf);
;
	.dbg	line, "game.c", 210
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     #<(_wolf)
	ldx     #>(_wolf)
	jsr     _check_collision
	sta     _collision
;
; if (collision){if (iFrame <= 0 && roll == 0){
;
	.dbg	line, "game.c", 211
	lda     _collision
	beq     L0036
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvc     L0037
	eor     #$80
L0037:	bpl     L0036
	lda     _roll
	ora     _roll+1
	bne     L0036
;
; health -= 1;
;
	.dbg	line, "game.c", 212
	lda     _health
	sec
	sbc     #$01
	sta     _health
	bcs     L003C
	dec     _health+1
;
; iFrame = 26;
;
	.dbg	line, "game.c", 213
L003C:	ldx     #$00
	lda     #$1A
	sta     _iFrame
	stx     _iFrame+1
;
; collision = check_collision(&sword, &wolf); 
;
	.dbg	line, "game.c", 217
L0036:	lda     #<(_sword)
	ldx     #>(_sword)
	jsr     pushax
	lda     #<(_wolf)
	ldx     #>(_wolf)
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 218
	lda     _collision
	bne     L0062
;
; }
;
	.dbg	line, "game.c", 250
	rts
;
; wolf.health -= 1;
;
	.dbg	line, "game.c", 219
L0062:	lda     _wolf+4
	sec
	sbc     #$01
	sta     _wolf+4
	bcs     L003E
	dec     _wolf+4+1
;
; if(wolf.health <= 0){
;
	.dbg	line, "game.c", 220
L003E:	lda     _wolf+4
	ora     _wolf+4+1
	beq     L0063
;
; }
;
	.dbg	line, "game.c", 250
	rts
;
; wolfSpr = null;
;
	.dbg	line, "game.c", 221
L0063:	lda     #>(_null)
	sta     _wolfSpr+1
	lda     #<(_null)
	sta     _wolfSpr
;
; drawSprites();
;
	.dbg	line, "game.c", 223
	jsr     _drawSprites
;
; i = 0;
;
	.dbg	line, "game.c", 224
	lda     #$00
	sta     _i
	sta     _i+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 226
L0041:	jsr     _ppu_wait_nmi
;
; i++;
;
	.dbg	line, "game.c", 227
	inc     _i
	bne     L0044
	inc     _i+1
;
; }while(i <= 35);
;
	.dbg	line, "game.c", 228
L0044:	lda     _i
	cmp     #$24
	lda     _i+1
	sbc     #$00
	bvc     L0045
	eor     #$80
L0045:	bmi     L0041
;
; canLeave = 1;
;
	.dbg	line, "game.c", 230
	ldx     #$00
	lda     #$01
	sta     _canLeave
	stx     _canLeave+1
;
; worldMap[mapPos] = 13;
;
	.dbg	line, "game.c", 231
	lda     _mapPos
	clc
	adc     #<(_worldMap)
	sta     ptr1
	lda     _mapPos+1
	adc     #>(_worldMap)
	sta     ptr1+1
	lda     #$0D
	ldy     #$00
	sta     (ptr1),y
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 232
	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; eMap[mapPos] = 0;
;
	.dbg	line, "game.c", 233
	lda     _mapPos
	clc
	adc     #<(_eMap)
	sta     ptr1
	lda     _mapPos+1
	adc     #>(_eMap)
	sta     ptr1+1
	txa
	tay
	sta     (ptr1),y
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 234
	lda     #$04
	jsr     pusha
	txa
	jsr     _pal_fade_to
;
; i = 0;
;
	.dbg	line, "game.c", 235
	lda     #$00
	sta     _i
	sta     _i+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 237
L0046:	jsr     _ppu_wait_nmi
;
; i++;
;
	.dbg	line, "game.c", 238
	inc     _i
	bne     L0049
	inc     _i+1
;
; }while(i <= 30);
;
	.dbg	line, "game.c", 239
L0049:	lda     _i
	cmp     #$1F
	lda     _i+1
	sbc     #$00
	bvc     L004A
	eor     #$80
L004A:	bmi     L0046
;
; draw_bg();
;
	.dbg	line, "game.c", 240
	jsr     _draw_bg
;
; pal_fade_to(0,4); // back to normal brightness 
;
	.dbg	line, "game.c", 241
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to
;
; }else if(iMap[mapPos] == 1){
;
	.dbg	line, "game.c", 246
L0030:	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_iMap)
	sta     ptr1+1
	ldy     #<(_iMap)
	lda     (ptr1),y
	cmp     #$01
	bne     L004D
;
; collision = check_collision(&knight, &bonfire); 
;
	.dbg	line, "game.c", 247
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     #<(_bonfire)
	ldx     #>(_bonfire)
	jsr     _check_collision
	sta     _collision
;
; if (collision){rest();}
;
	.dbg	line, "game.c", 248
	lda     _collision
	beq     L004D
	jmp     _rest
;
; }
;
	.dbg	line, "game.c", 250
L004D:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

	.dbg	func, "draw_bg", "00", extern, "_draw_bg"

.segment	"CODE"

;
; mapTiles[35] = 48+flasks; //Update the mapTiles to have the correct number of flasks
;
	.dbg	line, "game.c", 253
	lda     _flasks
	clc
	adc     #$30
	sta     _mapTiles+35
;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 255
	jsr     _ppu_off
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "game.c", 256
	jsr     _set_vram_buffer
;
; p_maps = All_Collision_Maps[which_bg];
;
	.dbg	line, "game.c", 258
	ldx     #$00
	lda     _which_bg
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy (c_map, p_maps, 240);
;
	.dbg	line, "game.c", 259
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; set_data_pointer(p_maps);
;
	.dbg	line, "game.c", 260
	lda     _p_maps
	ldx     _p_maps+1
	jsr     _set_data_pointer
;
; set_mt_pointer(mapTiles);
;
	.dbg	line, "game.c", 261
	lda     #<(_mapTiles)
	ldx     #>(_mapTiles)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	.dbg	line, "game.c", 262
	lda     #$00
L0010:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	.dbg	line, "game.c", 263
	lda     #$00
L000F:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	.dbg	line, "game.c", 264
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	.dbg	line, "game.c", 265
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	.dbg	line, "game.c", 266
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	.dbg	line, "game.c", 267
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	.dbg	line, "game.c", 268
	lda     _x
	cmp     #$E0
	beq     L0012
;
; for(x=0; ;x+=0x20){
;
	.dbg	line, "game.c", 263
	lda     #$20
	clc
	adc     _x
	jmp     L000F
;
; if (y == 0xe0) break;
;
	.dbg	line, "game.c", 270
L0012:	lda     _y
	cmp     #$E0
	beq     L0004
;
; for(y=0; ;y+=0x20){
;
	.dbg	line, "game.c", 262
	lda     #$20
	clc
	adc     _y
	jmp     L0010
;
; loadEnemyData();
;
	.dbg	line, "game.c", 274
L0004:	jsr     _loadEnemyData
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "game.c", 275
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgCollision: near

	.dbg	func, "bgCollision", "00", extern, "_bgCollision"

.segment	"CODE"

;
; collision_L = 0;
;
	.dbg	line, "game.c", 282
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	.dbg	line, "game.c", 283
	sta     _collision_R
;
; collision_U = 0;
;
	.dbg	line, "game.c", 284
	sta     _collision_U
;
; collision_D = 0;
;
	.dbg	line, "game.c", 285
	sta     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 287
	lda     _knight
	sta     _temp_x
;
; temp_y = knight.y; // top side
;
	.dbg	line, "game.c", 288
	lda     _knight+1
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 290
	cmp     #$F0
	bcc     L0015
;
; }
;
	.dbg	line, "game.c", 326
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
	.dbg	line, "game.c", 293
L0015:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	.dbg	line, "game.c", 294
	ldy     _coordinates
	lda     _c_map,y
	beq     L0012
;
; ++collision_L;
;
	.dbg	line, "game.c", 295
	inc     _collision_L
;
; ++collision_U;
;
	.dbg	line, "game.c", 296
	inc     _collision_U
;
; temp_x = knight.x + knight.width; // right side
;
	.dbg	line, "game.c", 299
L0012:	lda     _knight
	clc
	adc     _knight+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	.dbg	line, "game.c", 301
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 302
	ldy     _coordinates
	lda     _c_map,y
	beq     L0013
;
; ++collision_R;
;
	.dbg	line, "game.c", 303
	inc     _collision_R
;
; ++collision_U;
;
	.dbg	line, "game.c", 304
	inc     _collision_U
;
; temp_y = knight.y + knight.height; // bottom side
;
	.dbg	line, "game.c", 307
L0013:	lda     _knight+1
	clc
	adc     _knight+3
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 308
	cmp     #$F0
	bcs     L000A
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	.dbg	line, "game.c", 311
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 312
	ldy     _coordinates
	lda     _c_map,y
	beq     L0014
;
; ++collision_R;
;
	.dbg	line, "game.c", 313
	inc     _collision_R
;
; ++collision_D;
;
	.dbg	line, "game.c", 314
	inc     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 317
L0014:	lda     _knight
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	.dbg	line, "game.c", 319
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 320
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_L;
;
	.dbg	line, "game.c", 321
	inc     _collision_L
;
; ++collision_D;
;
	.dbg	line, "game.c", 322
	inc     _collision_D
;
; }
;
	.dbg	line, "game.c", 326
L000A:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadEnemyData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadEnemyData: near

	.dbg	func, "loadEnemyData", "00", extern, "_loadEnemyData"

.segment	"CODE"

;
; loadRoomData();
;
	.dbg	line, "game.c", 332
	jsr     _loadRoomData
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 333
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0013
	eor     #$80
L0013:	bmi     L0018
;
; }
;
	.dbg	line, "game.c", 346
	rts
;
; E[i].width = 15;//set size of enemy
;
	.dbg	line, "game.c", 334
L0018:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     #$0F
	ldy     #$02
	sta     (ptr1),y
;
; E[i].height = 15;
;
	.dbg	line, "game.c", 335
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     #$0F
	iny
	sta     (ptr1),y
;
; E[i].x = 4*rand8();
;
	.dbg	line, "game.c", 339
L0007:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	asl     a
	asl     a
	ldy     #$00
	jsr     staspidx
;
; }while(!(E[i].x <= 224 && E[i].x >= 16));
;
	.dbg	line, "game.c", 340
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     #$E1
	bcs     L0014
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     #$10
	bcs     L0015
L0014:	lda     #$00
	jmp     L000C
L0015:	lda     #$01
L000C:	jsr     bnega
	bne     L0007
;
; E[i].y = 4*rand8();
;
	.dbg	line, "game.c", 343
L0008:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	asl     a
	asl     a
	ldy     #$01
	jsr     staspidx
;
; }while(!((E[i].y <= 208) && (E[i].y >= 32))); 
;
	.dbg	line, "game.c", 344
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$D1
	bcs     L0016
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$20
	bcs     L0017
L0016:	lda     #$00
	jmp     L0012
L0017:	tya
L0012:	jsr     bnega
	bne     L0008
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 333
	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateHealth (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateHealth: near

	.dbg	func, "updateHealth", "00", extern, "_updateHealth"

.segment	"CODE"

;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 349
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _health
	lda     _i+1
	sbc     _health+1
	bvc     L0007
	eor     #$80
L0007:	bpl     L0003
;
; oam_spr((i*8), 0, 0x80, 1);
;
	.dbg	line, "game.c", 350
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 349
	inc     _i
	bne     L0002
	inc     _i+1
	jmp     L0002
;
; }
;
	.dbg	line, "game.c", 353
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loseCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loseCheck: near

	.dbg	func, "loseCheck", "00", extern, "_loseCheck"

.segment	"CODE"

;
; if(health <= 0){
;
	.dbg	line, "game.c", 367
	lda     _health
	cmp     #$01
	lda     _health+1
	sbc     #$00
	bvc     L0003
	eor     #$80
L0003:	bmi     L000C
;
; }
;
	.dbg	line, "game.c", 410
	rts
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 369
L000C:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 373
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 374
	jsr     _clearScreen
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 375
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	.dbg	line, "game.c", 376
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$09
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 377
	lda     #$04
	jsr     _pal_bright
;
; i = 0;
;
	.dbg	line, "game.c", 378
	lda     #$00
	sta     _i
	sta     _i+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 380
L0004:	jsr     _ppu_wait_nmi
;
; i++;
;
	.dbg	line, "game.c", 381
	inc     _i
	bne     L0007
	inc     _i+1
;
; }while(i <= 180);
;
	.dbg	line, "game.c", 382
L0007:	lda     _i
	cmp     #$B5
	lda     _i+1
	sbc     #$00
	bvc     L0008
	eor     #$80
L0008:	bmi     L0004
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 387
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off(); // screen off //make this better and fade in/out after saying you died
;
	.dbg	line, "game.c", 388
	jsr     _ppu_off
;
; clearScreen();
;
	.dbg	line, "game.c", 389
	jsr     _clearScreen
;
; mapPos = respawnPos;
;
	.dbg	line, "game.c", 391
	lda     _respawnPos+1
	sta     _mapPos+1
	lda     _respawnPos
	sta     _mapPos
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 392
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 394
	jsr     _draw_bg
;
; health = maxHealth;
;
	.dbg	line, "game.c", 395
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; stamina = maxStam;
;
	.dbg	line, "game.c", 396
	lda     _maxStam+1
	sta     _stamina+1
	lda     _maxStam
	sta     _stamina
;
; knight.x = 120;
;
	.dbg	line, "game.c", 397
	lda     #$78
	sta     _knight
;
; knight.y = 112;
;
	.dbg	line, "game.c", 398
	lda     #$70
	sta     _knight+1
;
; flasks = 3;
;
	.dbg	line, "game.c", 399
	ldx     #$00
	lda     #$03
	sta     _flasks
	stx     _flasks+1
;
; roll = 0;
;
	.dbg	line, "game.c", 400
	txa
	sta     _roll
	sta     _roll+1
;
; if(wolf.health > 0){wolf.health = wolf.maxHth;} //Remove for multiple bosses
;
	.dbg	line, "game.c", 401
	lda     _wolf+4
	ora     _wolf+4+1
	beq     L000B
	lda     _wolf+6+1
	sta     _wolf+4+1
	lda     _wolf+6
	sta     _wolf+4
;
; canLeave = 1;
;
	.dbg	line, "game.c", 402
L000B:	lda     #$01
	sta     _canLeave
	stx     _canLeave+1
;
; dir = 3;
;
	.dbg	line, "game.c", 403
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 404
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 405
	jsr     _ppu_wait_nmi
;
; ppu_on_all();
;
	.dbg	line, "game.c", 406
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 407
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ nextRoom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nextRoom: near

	.dbg	func, "nextRoom", "00", extern, "_nextRoom"

.segment	"CODE"

;
; if(canLeave){
;
	.dbg	line, "game.c", 413
	lda     _canLeave
	ora     _canLeave+1
	jeq     L0002
;
; if(knight.y < 13){
;
	.dbg	line, "game.c", 414
	lda     _knight+1
	cmp     #$0D
	bcs     L0015
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 415
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 221;
;
	.dbg	line, "game.c", 417
	lda     #$DD
	sta     _knight+1
;
; mapPos -= mapWidth;
;
	.dbg	line, "game.c", 418
	lda     _mapWidth
	eor     #$FF
	sec
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	eor     #$FF
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 419
	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 422
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 423
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 424
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 425
	lda     #$04
	jmp     _pal_bright
;
; else if(knight.y > 221){
;
	.dbg	line, "game.c", 428
L0015:	lda     _knight+1
	cmp     #$DE
	bcc     L0016
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 429
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 13;
;
	.dbg	line, "game.c", 430
	lda     #$0D
	sta     _knight+1
;
; mapPos += mapWidth;
;
	.dbg	line, "game.c", 431
	lda     _mapWidth
	clc
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 432
	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 434
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 435
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 436
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 437
	lda     #$04
	jmp     _pal_bright
;
; else if(knight.x <= 3 ){
;
	.dbg	line, "game.c", 440
L0016:	lda     _knight
	cmp     #$04
	bcs     L0017
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 441
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 236;
;
	.dbg	line, "game.c", 442
	lda     #$EC
	sta     _knight
;
; mapPos=mapPos-1;
;
	.dbg	line, "game.c", 443
	lda     _mapPos
	ldx     _mapPos+1
	sec
	sbc     #$01
	bcs     L0008
	dex
L0008:	sta     _mapPos
	stx     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 444
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 446
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 447
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 448
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 449
	lda     #$04
	jmp     _pal_bright
;
; else if(knight.x >= 237){
;
	.dbg	line, "game.c", 452
L0017:	lda     _knight
	cmp     #$ED
	bcc     L0013
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 453
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 4;//can't go less than 0, so have to be a pixel over
;
	.dbg	line, "game.c", 454
	lda     #$04
	sta     _knight
;
; mapPos=mapPos+1;
;
	.dbg	line, "game.c", 455
	lda     _mapPos
	ldx     _mapPos+1
	clc
	adc     #$01
	bcc     L000B
	inx
L000B:	sta     _mapPos
	stx     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 456
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 458
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 459
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 460
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 461
	lda     #$04
	jmp     _pal_bright
;
; if(knight.y < 32){
;
	.dbg	line, "game.c", 466
L0002:	lda     _knight+1
	cmp     #$20
	bcs     L0018
;
; knight.y += 4;
;
	.dbg	line, "game.c", 467
	lda     #$04
	clc
	adc     _knight+1
	sta     _knight+1
;
; else if(knight.y > 208){
;
	.dbg	line, "game.c", 471
	rts
L0018:	lda     _knight+1
	cmp     #$D1
	bcc     L0019
;
; knight.y -= 4;
;
	.dbg	line, "game.c", 472
	sec
	sbc     #$04
	sta     _knight+1
;
; else if(knight.x < 16 ){
;
	.dbg	line, "game.c", 475
	rts
L0019:	lda     _knight
	cmp     #$10
	bcs     L001A
;
; knight.x += 4;
;
	.dbg	line, "game.c", 476
	lda     #$04
	clc
	adc     _knight
;
; else if(knight.x > 224){
;
	.dbg	line, "game.c", 479
	jmp     L0014
L001A:	lda     _knight
	cmp     #$E1
	bcc     L0013
;
; knight.x -= 4;
;
	.dbg	line, "game.c", 480
	sec
	sbc     #$04
L0014:	sta     _knight
;
; }
;
	.dbg	line, "game.c", 484
L0013:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

	.dbg	func, "clearScreen", "00", extern, "_clearScreen"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 356
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0));//set to top corner
;
	.dbg	line, "game.c", 357
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; i = 0;
;
	.dbg	line, "game.c", 358
	lda     #$00
	sta     _i
	sta     _i+1
;
; vram_put(0);
;
	.dbg	line, "game.c", 360
L0008:	jsr     _vram_put
;
; i++;
;
	.dbg	line, "game.c", 361
	inc     _i
	bne     L0005
	inc     _i+1
;
; }while(i < 960);//32*30
;
	.dbg	line, "game.c", 362
L0005:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	bcs     L0008
;
; ppu_on_all();
;
	.dbg	line, "game.c", 363
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ win (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_win: near

	.dbg	func, "win", "00", extern, "_win"

.segment	"CODE"

;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 487
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 489
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 490
	jsr     _clearScreen
;
; loop = 0;
;
	.dbg	line, "game.c", 491
	lda     #$00
	sta     _loop
	sta     _loop+1
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 492
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(winTxt,sizeof(winTxt));
;
	.dbg	line, "game.c", 493
	lda     #<(_winTxt)
	ldx     #>(_winTxt)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 494
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadRoomData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadRoomData: near

	.dbg	func, "loadRoomData", "00", extern, "_loadRoomData"

.segment	"CODE"

;
; if( eMap[mapPos] >= 0 && eMap[mapPos] <= 9 ){numberOfE = eMap[mapPos]; bossType = 0; }
;
	.dbg	line, "game.c", 500
	lda     _mapPos+1
	clc
	adc     #>(_eMap)
	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_eMap)
	sta     ptr1+1
	ldy     #<(_eMap)
	lda     (ptr1),y
	cmp     #$0A
	bcs     L0002
	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_eMap)
	sta     ptr1+1
	ldy     #<(_eMap)
	ldx     #$00
	lda     (ptr1),y
	sta     _numberOfE
	stx     _numberOfE+1
	stx     _bossType
;
; else{bossType = eMap[mapPos]; numberOfE = 0; canLeave = 0;}
;
	.dbg	line, "game.c", 501
	rts
L0002:	lda     _mapPos
	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_eMap)
	sta     ptr1+1
	ldy     #<(_eMap)
	lda     (ptr1),y
	sta     _bossType
	lda     #$00
	sta     _numberOfE
	sta     _numberOfE+1
	sta     _canLeave
	sta     _canLeave+1
;
; }
;
	.dbg	line, "game.c", 504
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateStamina (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStamina: near

	.dbg	func, "updateStamina", "00", extern, "_updateStamina"

.segment	"CODE"

;
; if(stamina < maxStam && regenTimer <= 0){
;
	.dbg	line, "game.c", 507
	lda     _stamina
	cmp     _maxStam
	lda     _stamina+1
	sbc     _maxStam+1
	bvc     L000F
	eor     #$80
L000F:	bpl     L0002
	lda     _regenTimer
	cmp     #$01
	lda     _regenTimer+1
	sbc     #$00
	bvc     L0004
	eor     #$80
L0004:	bpl     L0002
;
; stamina++;
;
	.dbg	line, "game.c", 508
	inc     _stamina
	bne     L0007
	inc     _stamina+1
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 509
L0007:	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; }else{regenTimer -= 1;}
;
	.dbg	line, "game.c", 510
	jmp     L0014
L0002:	lda     _regenTimer
	sec
	sbc     #$01
	sta     _regenTimer
	bcs     L0014
	dec     _regenTimer+1
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 512
L0014:	lda     #$00
	sta     _i
	sta     _i+1
L000A:	lda     _i
	cmp     _stamina
	lda     _i+1
	sbc     _stamina+1
	bvc     L0010
	eor     #$80
L0010:	bpl     L000B
;
; oam_spr((i*8), 8, 0x90, 1);
;
	.dbg	line, "game.c", 513
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 512
	inc     _i
	bne     L000A
	inc     _i+1
	jmp     L000A
;
; }
;
	.dbg	line, "game.c", 515
L000B:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ selBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_selBtn: near

	.dbg	func, "selBtn", "00", extern, "_selBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_SELECT){
;
	.dbg	line, "game.c", 601
	lda     _pad1_new
	ldx     #$00
	and     #$20
	beq     L0005
;
; if (pause == 0){
;
	.dbg	line, "game.c", 602
	lda     _pause
	ora     _pause+1
	bne     L0007
;
; pause = 1;
;
	.dbg	line, "game.c", 603
	lda     #$01
;
; }else{pause = 0;}
;
	.dbg	line, "game.c", 604
	jmp     L0008
L0007:	txa
L0008:	sta     _pause
	stx     _pause+1
;
; }
;
	.dbg	line, "game.c", 611
L0005:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ stBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_stBtn: near

	.dbg	func, "stBtn", "00", extern, "_stBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_START && flasks > 0 && roll == 0){
;
	.dbg	line, "game.c", 586
	lda     _pad1_new
	and     #$10
	beq     L000D
	lda     _flasks
	cmp     #$01
	lda     _flasks+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L000D
	lda     _roll
	ora     _roll+1
	beq     L000E
L000D:	rts
;
; flasks -=1;
;
	.dbg	line, "game.c", 587
L000E:	lda     _flasks
	sec
	sbc     #$01
	sta     _flasks
	bcs     L0008
	dec     _flasks+1
;
; health += 4;
;
	.dbg	line, "game.c", 588
L0008:	lda     #$04
	clc
	adc     _health
	sta     _health
	bcc     L0009
	inc     _health+1
;
; if (health > maxHealth){health=maxHealth;}//Ensure no overheal
;
	.dbg	line, "game.c", 589
L0009:	lda     _health
	ldx     _health+1
	jsr     pushax
	lda     _maxHealth
	ldx     _maxHealth+1
	jsr     tosicmp
	bmi     L000A
	beq     L000A
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; mapTiles[35] = 48+flasks; //Update the mapTiles to have the correct number of flasks
;
	.dbg	line, "game.c", 592
L000A:	lda     _flasks
	clc
	adc     #$30
	sta     _mapTiles+35
;
; address = get_ppu_addr(0, 0xF0, 0); //Address of the flask
;
	.dbg	line, "game.c", 593
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, 7); // redraw just the flasks - no need to update entire screen + doesn't require the screen to be turned off
;
	.dbg	line, "game.c", 594
	jsr     pushax
	lda     #$07
	jmp     _buffer_1_mt

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ aBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_aBtn: near

	.dbg	func, "aBtn", "00", extern, "_aBtn"

.segment	"CODE"

;
; if((pad1_new & PAD_A)&& (!roll) ){
;
	.dbg	line, "game.c", 518
	lda     _pad1_new
	and     #$80
	beq     L0015
	lda     _roll
	ora     _roll+1
	beq     L0016
L0015:	rts
;
; if(stamina >= 1){
;
	.dbg	line, "game.c", 519
L0016:	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	bmi     L0017
;
; }
;
	.dbg	line, "game.c", 565
	rts
;
; stamina-=1;
;
	.dbg	line, "game.c", 520
L0017:	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0008
	dec     _stamina+1
;
; switch(dir){
;
	.dbg	line, "game.c", 521
L0008:	lda     _dir
	ldx     _dir+1
;
; }
;
	.dbg	line, "game.c", 558
	cpx     #$00
	jne     L000A
	cmp     #$01
	beq     L000B
	cmp     #$02
	beq     L000D
	cmp     #$03
	beq     L000F
	cmp     #$04
	jeq     L0011
	jmp     L000A
;
; playerSprite=upAttSprite;
;
	.dbg	line, "game.c", 523
L000B:	lda     #>(_upAttSprite)
	sta     _playerSprite+1
	lda     #<(_upAttSprite)
	sta     _playerSprite
;
; swordSpr=srdU;
;
	.dbg	line, "game.c", 524
	lda     #>(_srdU)
	sta     _swordSpr+1
	lda     #<(_srdU)
	sta     _swordSpr
;
; sword.y = knight.y-8;
;
	.dbg	line, "game.c", 525
	lda     _knight+1
	sec
	sbc     #$08
	sta     _sword+1
;
; sword.x = knight.x;
;
	.dbg	line, "game.c", 526
	lda     _knight
	sta     _sword
;
; testCollision();
;
	.dbg	line, "game.c", 527
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 528
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=upSprite;
;
	.dbg	line, "game.c", 529
	lda     #>(_upSprite)
	sta     _playerSprite+1
	lda     #<(_upSprite)
;
; break;
;
	.dbg	line, "game.c", 530
	jmp     L0013
;
; playerSprite=rightAttSprite;
;
	.dbg	line, "game.c", 532
L000D:	lda     #>(_rightAttSprite)
	sta     _playerSprite+1
	lda     #<(_rightAttSprite)
	sta     _playerSprite
;
; swordSpr=srdR;
;
	.dbg	line, "game.c", 533
	lda     #>(_srdR)
	sta     _swordSpr+1
	lda     #<(_srdR)
	sta     _swordSpr
;
; sword.x = knight.x+16;
;
	.dbg	line, "game.c", 534
	lda     _knight
	clc
	adc     #$10
	sta     _sword
;
; sword.y = knight.y;
;
	.dbg	line, "game.c", 535
	lda     _knight+1
	sta     _sword+1
;
; testCollision();
;
	.dbg	line, "game.c", 536
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 537
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=rightSprite;
;
	.dbg	line, "game.c", 538
	lda     #>(_rightSprite)
	sta     _playerSprite+1
	lda     #<(_rightSprite)
;
; break;
;
	.dbg	line, "game.c", 539
	jmp     L0013
;
; playerSprite=downAttSprite;
;
	.dbg	line, "game.c", 541
L000F:	lda     #>(_downAttSprite)
	sta     _playerSprite+1
	lda     #<(_downAttSprite)
	sta     _playerSprite
;
; swordSpr=srdD;
;
	.dbg	line, "game.c", 542
	lda     #>(_srdD)
	sta     _swordSpr+1
	lda     #<(_srdD)
	sta     _swordSpr
;
; sword.y = knight.y+16;
;
	.dbg	line, "game.c", 543
	lda     _knight+1
	clc
	adc     #$10
	sta     _sword+1
;
; sword.x = knight.x;
;
	.dbg	line, "game.c", 544
	lda     _knight
	sta     _sword
;
; testCollision();
;
	.dbg	line, "game.c", 545
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 546
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=downSprite;
;
	.dbg	line, "game.c", 547
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
;
; break;
;
	.dbg	line, "game.c", 548
	jmp     L0013
;
; playerSprite=leftAttSprite;
;
	.dbg	line, "game.c", 550
L0011:	lda     #>(_leftAttSprite)
	sta     _playerSprite+1
	lda     #<(_leftAttSprite)
	sta     _playerSprite
;
; swordSpr=srdL;
;
	.dbg	line, "game.c", 551
	lda     #>(_srdL)
	sta     _swordSpr+1
	lda     #<(_srdL)
	sta     _swordSpr
;
; sword.x = knight.x-8;
;
	.dbg	line, "game.c", 552
	lda     _knight
	sec
	sbc     #$08
	sta     _sword
;
; sword.y = knight.y;
;
	.dbg	line, "game.c", 553
	lda     _knight+1
	sta     _sword+1
;
; testCollision();
;
	.dbg	line, "game.c", 554
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 555
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=leftSprite;
;
	.dbg	line, "game.c", 556
	lda     #>(_leftSprite)
	sta     _playerSprite+1
	lda     #<(_leftSprite)
L0013:	sta     _playerSprite
;
; swordSpr=null;
;
	.dbg	line, "game.c", 559
L000A:	lda     #>(_null)
	sta     _swordSpr+1
	lda     #<(_null)
	sta     _swordSpr
;
; sword.x = 0;//move it so enemies can't collide
;
	.dbg	line, "game.c", 560
	lda     #$00
	sta     _sword
;
; sword.y = 0;
;
	.dbg	line, "game.c", 561
	sta     _sword+1
;
; }
;
	.dbg	line, "game.c", 565
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bBtn: near

	.dbg	func, "bBtn", "00", extern, "_bBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_B && (!roll)){
;
	.dbg	line, "game.c", 568
	lda     _pad1_new
	and     #$40
	beq     L000A
	lda     _roll
	ora     _roll+1
	beq     L000B
L000A:	rts
;
; if (stamina >= 1){
;
	.dbg	line, "game.c", 569
L000B:	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	bpl     L0006
;
; stamina -= 1;
;
	.dbg	line, "game.c", 570
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0008
	dec     _stamina+1
;
; roll = 1;
;
	.dbg	line, "game.c", 571
L0008:	ldx     #$00
	lda     #$01
	sta     _roll
	stx     _roll+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 572
	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; iFrame = 26;
;
	.dbg	line, "game.c", 573
	lda     #$1A
	sta     _iFrame
	stx     _iFrame+1
;
; }
;
	.dbg	line, "game.c", 581
L0006:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ eBgCol (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eBgCol: near

	.dbg	func, "eBgCol", "00", extern, "_eBgCol"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 616
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0015
	eor     #$80
L0015:	bmi     L001C
;
; };
;
	.dbg	line, "game.c", 667
	rts
;
; collision_L = 0;
;
	.dbg	line, "game.c", 618
L001C:	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	.dbg	line, "game.c", 619
	sta     _collision_R
;
; collision_U = 0;
;
	.dbg	line, "game.c", 620
	sta     _collision_U
;
; collision_D = 0;
;
	.dbg	line, "game.c", 621
	sta     _collision_D
;
; temp_x = E[i].x; // left side
;
	.dbg	line, "game.c", 623
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     _temp_x
;
; temp_y = E[i].y; // top side
;
	.dbg	line, "game.c", 624
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 626
	cmp     #$F0
	bcc     L001D
;
; };
;
	.dbg	line, "game.c", 667
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
	.dbg	line, "game.c", 629
L001D:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	.dbg	line, "game.c", 630
	ldy     _coordinates
	lda     _c_map,y
	beq     L0008
;
; ++collision_L;
;
	.dbg	line, "game.c", 631
	inc     _collision_L
;
; ++collision_U;
;
	.dbg	line, "game.c", 632
	inc     _collision_U
;
; temp_x = E[i].x + E[i].width; // right side
;
	.dbg	line, "game.c", 635
L0008:	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     sreg
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	.dbg	line, "game.c", 637
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 638
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_R;
;
	.dbg	line, "game.c", 639
	inc     _collision_R
;
; ++collision_U;
;
	.dbg	line, "game.c", 640
	inc     _collision_U
;
; temp_y = E[i].y + E[i].height; // bottom side
;
	.dbg	line, "game.c", 643
L000A:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     sreg
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 644
	cmp     #$F0
	bcc     L001E
;
; };
;
	.dbg	line, "game.c", 667
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	.dbg	line, "game.c", 647
L001E:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 648
	ldy     _coordinates
	lda     _c_map,y
	beq     L000D
;
; ++collision_R;
;
	.dbg	line, "game.c", 649
	inc     _collision_R
;
; ++collision_D;
;
	.dbg	line, "game.c", 650
	inc     _collision_D
;
; temp_x = E[i].x; // left side
;
	.dbg	line, "game.c", 653
L000D:	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	.dbg	line, "game.c", 655
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 656
	ldy     _coordinates
	lda     _c_map,y
	beq     L000F
;
; ++collision_L;
;
	.dbg	line, "game.c", 657
	inc     _collision_L
;
; ++collision_D;
;
	.dbg	line, "game.c", 658
	inc     _collision_D
;
; if(collision_D) E[i].y -= 1;
;
	.dbg	line, "game.c", 662
L000F:	lda     _collision_D
	beq     L0011
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(collision_U) E[i].y += 1;
;
	.dbg	line, "game.c", 663
L0011:	lda     _collision_U
	beq     L0012
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if(collision_L) E[i].x += 1;
;
	.dbg	line, "game.c", 664
L0012:	lda     _collision_L
	beq     L0013
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if(collision_R) E[i].x -= 1;
;
	.dbg	line, "game.c", 665
L0013:	lda     _collision_R
	beq     L0004
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 616
L0004:	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ wait (int time)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait: near

	.dbg	func, "wait", "00", extern, "_wait"
	.dbg	sym, "time", "00", auto, 0

.segment	"CODE"

;
; void wait(time){
;
	.dbg	line, "game.c", 669
	jsr     pushax
;
; while(time >= 0){
;
	.dbg	line, "game.c", 671
	jmp     L0004
;
; drawSprites();
;
	.dbg	line, "game.c", 672
L0002:	jsr     _drawSprites
;
; updateHealth();
;
	.dbg	line, "game.c", 673
	jsr     _updateHealth
;
; updateStamina();
;
	.dbg	line, "game.c", 674
	jsr     _updateStamina
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 675
	jsr     _ppu_wait_nmi
;
; eMove();
;
	.dbg	line, "game.c", 676
	jsr     _eMove
;
; eBgCol();
;
	.dbg	line, "game.c", 677
	jsr     _eBgCol
;
; time -= 1;
;
	.dbg	line, "game.c", 678
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
;
; while(time >= 0){
;
	.dbg	line, "game.c", 671
L0004:	ldy     #$01
	lda     (sp),y
	tax
	txa
	bpl     L0002
;
; }
;
	.dbg	line, "game.c", 680
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ eMove (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eMove: near

	.dbg	func, "eMove", "00", extern, "_eMove"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 683
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0010
	eor     #$80
L0010:	jpl     L0011
;
; if(E[i].x > knight.x){
;
	.dbg	line, "game.c", 684
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     _knight
	bcc     L0007
	beq     L0007
;
; E[i].x -= 1;
;
	.dbg	line, "game.c", 685
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(E[i].x < knight.x){
;
	.dbg	line, "game.c", 687
L0007:	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     _knight
	bcs     L0008
;
; E[i].x += 1;
;
	.dbg	line, "game.c", 688
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if(E[i].y > knight.y){
;
	.dbg	line, "game.c", 690
L0008:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     _knight+1
	bcc     L0009
	beq     L0009
;
; E[i].y -= 1;
;
	.dbg	line, "game.c", 691
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(E[i].y < knight.y){
;
	.dbg	line, "game.c", 693
L0009:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	cmp     _knight+1
	bcs     L0004
;
; E[i].y += 1;
;
	.dbg	line, "game.c", 694
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 683
L0004:	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002
;
; if(bossType == 'W' && wolf.health > 0){wolfMove();}
;
	.dbg	line, "game.c", 698
L0011:	lda     _bossType
	cmp     #$57
	bne     L0012
	lda     _wolf+4
	ora     _wolf+4+1
	bne     L0013
L0012:	rts
L0013:	jmp     _wolfMove

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ wolfMove (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wolfMove: near

	.dbg	func, "wolfMove", "00", extern, "_wolfMove"

.segment	"CODE"

;
; if (wolfCharge >= 35){//charging
;
	.dbg	line, "game.c", 706
	lda     _wolfCharge
	cmp     #$23
	lda     _wolfCharge+1
	sbc     #$00
	ldx     #$00
	bcc     L0002
;
; wolfCharge -= 1;
;
	.dbg	line, "game.c", 707
	lda     _wolfCharge
	sec
	sbc     #$01
	sta     _wolfCharge
	bcs     L0003
	dec     _wolfCharge+1
;
; wolf.x += wolfChX;
;
	.dbg	line, "game.c", 708
L0003:	lda     _wolfChX
	clc
	adc     _wolf
	sta     _wolf
;
; if(wolf.x < 16){wolf.x = 16;}
;
	.dbg	line, "game.c", 709
	cmp     #$10
	bcs     L0013
	lda     #$10
;
; else if(wolf.x > 208){wolf.x = 208;}
;
	.dbg	line, "game.c", 710
	jmp     L0011
L0013:	lda     _wolf
	cmp     #$D1
	bcc     L0006
	lda     #$D0
L0011:	sta     _wolf
;
; wolf.y += wolfChY;
;
	.dbg	line, "game.c", 711
L0006:	lda     _wolfChY
	clc
	adc     _wolf+1
	sta     _wolf+1
;
; if(wolf.y < 32){wolf.y = 32;}
;
	.dbg	line, "game.c", 712
	cmp     #$20
	bcs     L0014
	lda     #$20
	sta     _wolf+1
;
; else if(wolf.y > 200){wolf.y = 200;}
;
	.dbg	line, "game.c", 713
	rts
L0014:	lda     _wolf+1
	cmp     #$C9
	bcs     L0016
;
; }
;
	.dbg	line, "game.c", 730
	rts
;
; else if(wolf.y > 200){wolf.y = 200;}
;
	.dbg	line, "game.c", 713
L0016:	lda     #$C8
	sta     _wolf+1
;
; }else if (wolfCharge > 0){//waiting
;
	.dbg	line, "game.c", 717
	rts
L0002:	lda     _wolfCharge
	ora     _wolfCharge+1
	beq     L0015
;
; wolfCharge -= 1;
;
	.dbg	line, "game.c", 718
	lda     _wolfCharge
	sec
	sbc     #$01
	sta     _wolfCharge
	bcs     L000D
	dec     _wolfCharge+1
;
; }else{//start  new charge
;
	.dbg	line, "game.c", 719
L000D:	rts
;
; wolfCharge = 60;
;
	.dbg	line, "game.c", 720
L0015:	lda     #$3C
	sta     _wolfCharge
	stx     _wolfCharge+1
;
; wolfChX = (knight.x - wolf.x)/10; //should really make the speed constistant regardless of distance, but I think this is funny so ¯\(-_-)/¯
;
	.dbg	line, "game.c", 722
	lda     _knight
	sec
	sbc     _wolf
	pha
	txa
	sbc     #$00
	tax
	pla
	jsr     pushax
	lda     #$0A
	jsr     tosdiva0
	sta     _wolfChX
	stx     _wolfChX+1
;
; wolfChY = (knight.y - wolf.y)/10;
;
	.dbg	line, "game.c", 723
	lda     _knight+1
	sec
	sbc     _wolf+1
	pha
	lda     #$00
	sbc     #$00
	tax
	pla
	jsr     pushax
	lda     #$0A
	jsr     tosdiva0
	sta     _wolfChY
	stx     _wolfChY+1
;
; if((knight.x - wolf.x) < 0){wolfSpr = wolfL;}else{wolfSpr = wolfR;}//change sprite direction
;
	.dbg	line, "game.c", 726
	lda     _knight
	sec
	sbc     _wolf
	lda     #$00
	sbc     #$00
	tax
	cpx     #$80
	bcc     L000F
	lda     #>(_wolfL)
	sta     _wolfSpr+1
	lda     #<(_wolfL)
	jmp     L0012
L000F:	lda     #>(_wolfR)
	sta     _wolfSpr+1
	lda     #<(_wolfR)
L0012:	sta     _wolfSpr
;
; }
;
	.dbg	line, "game.c", 730
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ rest (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rest: near

	.dbg	func, "rest", "00", extern, "_rest"

.segment	"CODE"

;
; respawnPos = mapPos;
;
	.dbg	line, "game.c", 734
	lda     _mapPos+1
	sta     _respawnPos+1
	lda     _mapPos
	sta     _respawnPos
;
; flasks = 3;
;
	.dbg	line, "game.c", 735
	ldx     #$00
	lda     #$03
	sta     _flasks
	stx     _flasks+1
;
; health = maxHealth;
;
	.dbg	line, "game.c", 736
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; mapTiles[35] = 48+flasks; //Update the mapTiles to have the correct number of flasks
;
	.dbg	line, "game.c", 738
	lda     _flasks
	clc
	adc     #$30
	sta     _mapTiles+35
;
; address = get_ppu_addr(0, 0xF0, 0); //Address of the flask
;
	.dbg	line, "game.c", 739
	jsr     decsp2
	txa
	ldy     #$01
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	txa
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, 7);
;
	.dbg	line, "game.c", 740
	jsr     pushax
	lda     #$07
	jmp     _buffer_1_mt

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 14
	jsr     _ppu_off
;
; pal_bg(paletteBg); // load the BG palette
;
	.dbg	line, "game.c", 16
	lda     #<(_paletteBg)
	ldx     #>(_paletteBg)
	jsr     _pal_bg
;
; pal_spr(paletteSp);//load the sprite palette
;
	.dbg	line, "game.c", 17
	lda     #<(_paletteSp)
	ldx     #>(_paletteSp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "game.c", 18
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "game.c", 24
	jsr     _set_vram_buffer
;
; draw_bg();
;
	.dbg	line, "game.c", 25
	jsr     _draw_bg
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	.dbg	line, "game.c", 26
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; mapPos = center; //setting the mapPos to the center of map
;
	.dbg	line, "game.c", 28
	lda     _center+1
	sta     _mapPos+1
	lda     _center
	sta     _mapPos
;
; respawnPos = center;
;
	.dbg	line, "game.c", 29
	lda     _center+1
	sta     _respawnPos+1
	lda     _center
	sta     _respawnPos
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 30
	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 31
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; ppu_on_all(); // turn on screen now in draw_bg();
;
	.dbg	line, "game.c", 34
	jsr     _ppu_on_all
;
; while (loop){
;
	.dbg	line, "game.c", 39
	jmp     L000C
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 42
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 43
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "game.c", 44
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; move();//move the player
;
	.dbg	line, "game.c", 46
	jsr     _move
;
; nextRoom();
;
	.dbg	line, "game.c", 47
	jsr     _nextRoom
;
; testCollision();//sprite collisions
;
	.dbg	line, "game.c", 48
	jsr     _testCollision
;
; eBgCol();
;
	.dbg	line, "game.c", 49
	jsr     _eBgCol
;
; drawSprites();
;
	.dbg	line, "game.c", 50
	jsr     _drawSprites
;
; stBtn();
;
	.dbg	line, "game.c", 51
	jsr     _stBtn
;
; selBtn();
;
	.dbg	line, "game.c", 52
	jsr     _selBtn
;
; updateHealth();
;
	.dbg	line, "game.c", 53
	jsr     _updateHealth
;
; updateStamina();
;
	.dbg	line, "game.c", 54
	jsr     _updateStamina
;
; loseCheck();
;
	.dbg	line, "game.c", 55
	jsr     _loseCheck
;
; aBtn();
;
	.dbg	line, "game.c", 56
	jsr     _aBtn
;
; bBtn();
;
	.dbg	line, "game.c", 57
	jsr     _bBtn
;
; eMove();
;
	.dbg	line, "game.c", 59
	jsr     _eMove
;
; if (iFrame > 0){
;
	.dbg	line, "game.c", 61
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvs     L0006
	eor     #$80
L0006:	bpl     L0005
;
; iFrame -= 1;
;
	.dbg	line, "game.c", 62
	lda     _iFrame
	sec
	sbc     #$01
	sta     _iFrame
	bcs     L000D
	dec     _iFrame+1
;
; }else if (roll == 1){
;
	.dbg	line, "game.c", 63
	jmp     L000D
L0005:	lda     _roll+1
	bne     L000D
	lda     _roll
	cmp     #$01
	bne     L000D
;
; roll = 0;
;
	.dbg	line, "game.c", 64
	ldx     #$00
	txa
	sta     _roll
	sta     _roll+1
;
; playerSprite = downSprite; dir = 3;
;
	.dbg	line, "game.c", 65
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; while (pause){ //pause
;
	.dbg	line, "game.c", 68
	jmp     L000D
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 69
L000B:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "game.c", 70
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; selBtn();
;
	.dbg	line, "game.c", 71
	jsr     _selBtn
;
; while (pause){ //pause
;
	.dbg	line, "game.c", 68
L000D:	lda     _pause
	ora     _pause+1
	bne     L000B
;
; while (loop){
;
	.dbg	line, "game.c", 39
L000C:	lda     _loop
	ora     _loop+1
	jne     L0002
;
; while (1){ //prevents crashes on "win"
;
	.dbg	line, "game.c", 74
L0011:	jmp     L0011

	.dbg	line
.endproc

