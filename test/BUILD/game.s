;
; File generated by cc65 v 2.19 - Git bb1b5c3
;
	.fopt		compiler,"cc65 v 2.19 - Git bb1b5c3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "game.c", 1845, 1701693868
	.dbg		file, "LIB/neslib.h", 9196, 1701627949
	.dbg		file, "LIB/nesdoug.h", 6756, 1701627949
	.dbg		file, "Sprites.h", 402, 1701628531
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_write
	.export		_metasprite
	.export		_metasprite2
	.export		_metasprite3
	.export		_yPos
	.export		_xPos
	.export		_pad1
	.export		_text
	.export		_palette
	.export		_palette2
	.export		_main

.segment	"DATA"

_yPos:
	.byte	$40
_xPos:
	.byte	$88

.segment	"RODATA"

_metasprite:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_metasprite2:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_metasprite3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_text:
	.byte	$59,$6F,$75,$20,$74,$72,$75,$6C,$79,$20,$61,$72,$65,$20,$74,$68
	.byte	$65,$20,$64,$61,$72,$6B,$20,$73,$6F,$75,$6C,$00
_palette:
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$25
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette2:
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$07
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 48
	jsr     _ppu_off
;
; pal_bg(palette); // load the BG palette
;
	.dbg	line, "game.c", 50
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette2);//load the sprite palette
;
	.dbg	line, "game.c", 51
	lda     #<(_palette2)
	ldx     #>(_palette2)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "game.c", 52
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(3,3)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 55
	ldx     #$20
	lda     #$63
	jsr     _vram_adr
;
; vram_write(text,sizeof(text)); 
;
	.dbg	line, "game.c", 56
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$1C
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "game.c", 60
	jsr     _ppu_on_all
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 66
L0002:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if(pad1 & PAD_LEFT){
;
	.dbg	line, "game.c", 67
	and     #$02
	beq     L0011
;
; xPos -= 1;
;
	.dbg	line, "game.c", 68
	dec     _xPos
;
; else if (pad1 & PAD_RIGHT){
;
	.dbg	line, "game.c", 70
	jmp     L0012
L0011:	lda     _pad1
	and     #$01
	beq     L0012
;
; xPos += 1;
;
	.dbg	line, "game.c", 71
	inc     _xPos
;
; if(pad1 & PAD_UP){
;
	.dbg	line, "game.c", 73
L0012:	lda     _pad1
	and     #$08
	beq     L0013
;
; yPos -= 1;
;
	.dbg	line, "game.c", 74
	dec     _yPos
;
; else if (pad1 & PAD_DOWN){
;
	.dbg	line, "game.c", 76
	jmp     L000A
L0013:	lda     _pad1
	and     #$04
	beq     L000A
;
; yPos += 1;
;
	.dbg	line, "game.c", 77
	inc     _yPos
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "game.c", 79
L000A:	jsr     _ppu_wait_nmi
;
; oam_clear(); //Clear the sprite buffer.
;
	.dbg	line, "game.c", 80
	jsr     _oam_clear
;
; oam_meta_spr(xPos,yPos,metasprite); //Push 1 metasprite to the buffer.
;
	.dbg	line, "game.c", 82
	jsr     decsp2
	lda     _xPos
	ldy     #$01
	sta     (sp),y
	lda     _yPos
	dey
	sta     (sp),y
	lda     #<(_metasprite)
	ldx     #>(_metasprite)
	jsr     _oam_meta_spr
;
; oam_meta_spr(xPos-18,yPos+25,metasprite2);
;
	.dbg	line, "game.c", 83
	jsr     decsp2
	lda     _xPos
	sec
	sbc     #$12
	ldy     #$01
	sta     (sp),y
	lda     _yPos
	clc
	adc     #$19
	dey
	sta     (sp),y
	lda     #<(_metasprite2)
	ldx     #>(_metasprite2)
	jsr     _oam_meta_spr
;
; oam_meta_spr(xPos+18,yPos+25,metasprite3);
;
	.dbg	line, "game.c", 84
	jsr     decsp2
	lda     _xPos
	clc
	adc     #$12
	ldy     #$01
	sta     (sp),y
	lda     _yPos
	clc
	adc     #$19
	dey
	sta     (sp),y
	lda     #<(_metasprite3)
	ldx     #>(_metasprite3)
	jsr     _oam_meta_spr
;
; while (1){
;
	.dbg	line, "game.c", 63
	jmp     L0002

	.dbg	line
.endproc

