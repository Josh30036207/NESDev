;
; File generated by cc65 v 2.19 - Git bb1b5c3
;
	.fopt		compiler,"cc65 v 2.19 - Git bb1b5c3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "game.c", 10140, 1708883442
	.dbg		file, "LIB/neslib.h", 9196, 1701627949
	.dbg		file, "LIB/nesdoug.h", 6756, 1701627949
	.dbg		file, "sprites.h", 1986, 1708881946
	.dbg		file, "game.h", 2083, 1708883414
	.dbg		file, "BG/maps.c", 8433, 1707483872
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "check_collision", "00", extern, "_check_collision"
	.dbg		sym, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg		sym, "set_scroll_y", "00", extern, "_set_scroll_y"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_get_pad_new
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_y
	.export		_upSprite
	.export		_downSprite
	.export		_leftSprite
	.export		_rightSprite
	.export		_upAttSprite
	.export		_downAttSprite
	.export		_leftAttSprite
	.export		_rightAttSprite
	.export		_upSwd
	.export		_rightSwd
	.export		_rollSprite
	.export		_hollowSprite
	.export		_fire
	.export		_paletteBg
	.export		_paletteSp
	.export		_map0
	.export		_map1
	.export		_map2
	.export		_map3
	.export		_map4
	.export		_map5
	.export		_map6
	.export		_map7
	.export		_map8
	.export		_winRoom
	.export		_worldMap
	.export		_center
	.export		_mapPos
	.export		_mapWidth
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_text
	.export		_winTxt
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_playerSprite
	.export		_i
	.export		_health
	.export		_stamina
	.export		_maxHealth
	.export		_maxStam
	.export		_regenTimer
	.export		_timerSpeed
	.export		_iFrame
	.export		_loop
	.export		_roll
	.export		_dir
	.export		_canMove
	.export		_flasks
	.export		_knight
	.export		_Enemy
	.export		_numberOfE
	.export		_E
	.export		_tempE
	.export		_winBlock
	.export		_c_map
	.export		_All_Collision_Maps
	.export		_drawSprites
	.export		_move
	.export		_testCollision
	.export		_draw_bg
	.export		_bgCollision
	.export		_loadEnemyData
	.export		_updateHealth
	.export		_loseCheck
	.export		_nextRoom
	.export		_clearScreen
	.export		_win
	.export		_loadRoomData
	.export		_updateStamina
	.export		_selBtn
	.export		_stBtn
	.export		_aBtn
	.export		_bBtn
	.export		_main

.segment	"DATA"

_mapWidth:
	.word	$0005
_text:
	.byte	$59,$6F,$75,$20,$44,$69,$65,$64,$00
_winTxt:
	.byte	$59,$6F,$75,$20,$57,$69,$6E,$00
_health:
	.word	$0008
_stamina:
	.word	$0008
_maxHealth:
	.word	$0008
_maxStam:
	.word	$0008
_timerSpeed:
	.word	$0046
_iFrame:
	.word	$0000
_loop:
	.word	$0001
_roll:
	.word	$0000
_dir:
	.word	$0003
_canMove:
	.word	$0001
_flasks:
	.word	$0003
_knight:
	.byte	$28
	.byte	$3E
	.byte	$0F
	.byte	$0F
_Enemy:
	.byte	$40
	.byte	$93
	.byte	$0F
	.byte	$0F
_numberOfE:
	.word	$0003
_winBlock:
	.byte	$78
	.byte	$70
	.byte	$0F
	.byte	$07

.segment	"RODATA"

_upSprite:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_downSprite:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_leftSprite:
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$40
	.byte	$80
_rightSprite:
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$80
_upAttSprite:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_downAttSprite:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_leftAttSprite:
	.byte	$08
	.byte	$00
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$40
	.byte	$80
_rightAttSprite:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$00
	.byte	$80
_upSwd:
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$80
_rightSwd:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_rollSprite:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_hollowSprite:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_fire:
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$82
	.byte	$02
	.byte	$80
_paletteBg:
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$16
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSp:
	.byte	$25
	.byte	$00
	.byte	$0C
	.byte	$07
	.byte	$30
	.byte	$16
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$06
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_winRoom:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_worldMap:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
_center:
	.word	$000C
_All_Collision_Maps:
	.addr	_map0
	.addr	_map1
	.addr	_map2
	.addr	_map3
	.addr	_map4
	.addr	_map5
	.addr	_map6
	.addr	_map7
	.addr	_map8
	.addr	_winRoom

.segment	"BSS"

_mapPos:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_playerSprite:
	.res	2,$00
_i:
	.res	2,$00
_regenTimer:
	.res	2,$00
_E:
	.res	12,$00
_tempE:
	.res	12,$00
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

	.dbg	func, "drawSprites", "00", extern, "_drawSprites"

.segment	"CODE"

;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "game.c", 145
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	.dbg	line, "game.c", 147
	jsr     _oam_clear
;
; bank_spr(1);//switch to player spritesheet
;
	.dbg	line, "game.c", 148
	lda     #$01
	jsr     _bank_spr
;
; {oam_meta_spr(knight.x, knight.y, playerSprite);}
;
	.dbg	line, "game.c", 151
	jsr     decsp2
	lda     _knight
	ldy     #$01
	sta     (sp),y
	lda     _knight+1
	dey
	sta     (sp),y
	lda     _playerSprite
	ldx     _playerSprite+1
	jsr     _oam_meta_spr
;
; if(which_bg == 9){
;
	.dbg	line, "game.c", 154
	lda     _which_bg
	cmp     #$09
	bne     L000A
;
; oam_meta_spr(winBlock.x, winBlock.y , fire);
;
	.dbg	line, "game.c", 155
	jsr     decsp2
	lda     _winBlock
	ldy     #$01
	sta     (sp),y
	lda     _winBlock+1
	dey
	sta     (sp),y
	lda     #<(_fire)
	ldx     #>(_fire)
	jmp     _oam_meta_spr
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 157
L000A:	lda     #$00
	sta     _i
	sta     _i+1
L0004:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0009
	eor     #$80
L0009:	bpl     L0005
;
; oam_meta_spr(E[i].x, E[i].y , hollowSprite);
;
	.dbg	line, "game.c", 158
	jsr     decsp2
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_hollowSprite)
	ldx     #>(_hollowSprite)
	jsr     _oam_meta_spr
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 157
	inc     _i
	bne     L0004
	inc     _i+1
	jmp     L0004
;
; }
;
	.dbg	line, "game.c", 162
L0005:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move: near

	.dbg	func, "move", "00", extern, "_move"

.segment	"CODE"

;
; if(pad1 & PAD_LEFT){
;
	.dbg	line, "game.c", 64
	lda     _pad1
	and     #$02
	jeq     L0019
;
; playerSprite = leftSprite;
;
	.dbg	line, "game.c", 65
	lda     #>(_leftSprite)
	sta     _playerSprite+1
	lda     #<(_leftSprite)
	sta     _playerSprite
;
; dir = 4;
;
	.dbg	line, "game.c", 66
	ldx     #$00
	lda     #$04
	sta     _dir
	stx     _dir+1
;
; knight.x -= 2;
;
	.dbg	line, "game.c", 67
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; if(roll == 1){
;
	.dbg	line, "game.c", 68
	lda     _roll+1
	jne     L0008
	lda     _roll
	cmp     #$01
	jne     L0008
;
; iFrame = 12;
;
	.dbg	line, "game.c", 69
	lda     #$0C
	sta     _iFrame
	stx     _iFrame+1
;
; stamina -= 1;
;
	.dbg	line, "game.c", 70
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0005
	dec     _stamina+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 71
L0005:	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 72
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 73
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 74
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 75
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 76
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 77
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 78
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 79
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 80
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 81
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 82
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 83
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 84
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 85
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 86
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 87
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 88
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 89
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 90
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 91
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 92
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 93
	jsr     _nextRoom
;
; knight.x -= 3;
;
	.dbg	line, "game.c", 94
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; nextRoom();
;
	.dbg	line, "game.c", 95
	jsr     _nextRoom
;
; else if (pad1 & PAD_RIGHT){
;
	.dbg	line, "game.c", 100
	jmp     L0008
L0019:	lda     _pad1
	and     #$01
	beq     L0008
;
; playerSprite = rightSprite;
;
	.dbg	line, "game.c", 101
	lda     #>(_rightSprite)
	sta     _playerSprite+1
	lda     #<(_rightSprite)
	sta     _playerSprite
;
; dir = 2;
;
	.dbg	line, "game.c", 102
	ldx     #$00
	lda     #$02
	sta     _dir
	stx     _dir+1
;
; knight.x += 2;
;
	.dbg	line, "game.c", 103
	clc
	adc     _knight
	sta     _knight
;
; if(roll == 1){
;
	.dbg	line, "game.c", 104
	lda     _roll+1
	bne     L0008
	lda     _roll
	cmp     #$01
	bne     L0008
;
; iFrame = 12;
;
	.dbg	line, "game.c", 105
	lda     #$0C
	sta     _iFrame
	stx     _iFrame+1
;
; stamina -= 1;
;
	.dbg	line, "game.c", 106
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L000A
	dec     _stamina+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 107
L000A:	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; knight.x += 32;
;
	.dbg	line, "game.c", 108
	lda     #$20
	clc
	adc     _knight
	sta     _knight
;
; bgCollision();
;
	.dbg	line, "game.c", 112
L0008:	jsr     _bgCollision
;
; if(collision_R) knight.x -= 2;
;
	.dbg	line, "game.c", 113
	lda     _collision_R
	beq     L000B
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; if(collision_L) knight.x += 2;
;
	.dbg	line, "game.c", 114
L000B:	lda     _collision_L
	beq     L000C
	lda     #$02
	clc
	adc     _knight
	sta     _knight
;
; if(pad1 & PAD_UP){
;
	.dbg	line, "game.c", 115
L000C:	lda     _pad1
	and     #$08
	beq     L001A
;
; playerSprite = upSprite;
;
	.dbg	line, "game.c", 116
	lda     #>(_upSprite)
	sta     _playerSprite+1
	lda     #<(_upSprite)
	sta     _playerSprite
;
; dir = 1;
;
	.dbg	line, "game.c", 117
	ldx     #$00
	lda     #$01
	sta     _dir
	stx     _dir+1
;
; knight.y -= 2;
;
	.dbg	line, "game.c", 118
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; if(roll == 1){
;
	.dbg	line, "game.c", 119
	lda     _roll+1
	jne     L0013
	lda     _roll
	cmp     #$01
	jne     L0013
;
; iFrame = 12;
;
	.dbg	line, "game.c", 120
	lda     #$0C
	sta     _iFrame
	stx     _iFrame+1
;
; stamina -= 1;
;
	.dbg	line, "game.c", 121
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0010
	dec     _stamina+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 122
L0010:	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; knight.y -= 32;
;
	.dbg	line, "game.c", 123
	lda     _knight+1
	sec
	sbc     #$20
;
; else if (pad1 & PAD_DOWN){
;
	.dbg	line, "game.c", 127
	jmp     L0018
L001A:	lda     _pad1
	and     #$04
	beq     L0013
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 128
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; dir = 3;
;
	.dbg	line, "game.c", 129
	ldx     #$00
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; knight.y += 2;
;
	.dbg	line, "game.c", 130
	lda     #$02
	clc
	adc     _knight+1
	sta     _knight+1
;
; if(roll == 1){
;
	.dbg	line, "game.c", 131
	lda     _roll+1
	bne     L0013
	lda     _roll
	cmp     #$01
	bne     L0013
;
; iFrame = 12;
;
	.dbg	line, "game.c", 132
	lda     #$0C
	sta     _iFrame
	stx     _iFrame+1
;
; stamina -= 1;
;
	.dbg	line, "game.c", 133
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0015
	dec     _stamina+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 134
L0015:	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; knight.y += 32;
;
	.dbg	line, "game.c", 135
	lda     #$20
	clc
	adc     _knight+1
L0018:	sta     _knight+1
;
; bgCollision();
;
	.dbg	line, "game.c", 139
L0013:	jsr     _bgCollision
;
; if(collision_D) knight.y -= 2;
;
	.dbg	line, "game.c", 140
	lda     _collision_D
	beq     L0016
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; if(collision_U) knight.y += 2;
;
	.dbg	line, "game.c", 141
L0016:	lda     _collision_U
	beq     L0017
	lda     #$02
	clc
	adc     _knight+1
	sta     _knight+1
;
; }
;
	.dbg	line, "game.c", 142
L0017:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ testCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_testCollision: near

	.dbg	func, "testCollision", "00", extern, "_testCollision"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 165
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L000D
	eor     #$80
L000D:	bpl     L000E
;
; collision = check_collision(&knight, &E[i]); 
;
	.dbg	line, "game.c", 166
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 168
	lda     _collision
	beq     L0004
;
; E[i].y++;
;
	.dbg	line, "game.c", 169
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if (iFrame <= 0){
;
	.dbg	line, "game.c", 170
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvc     L0009
	eor     #$80
L0009:	bpl     L0004
;
; health -= 1;
;
	.dbg	line, "game.c", 171
	lda     _health
	sec
	sbc     #$01
	sta     _health
	bcs     L000A
	dec     _health+1
;
; iFrame = 26;
;
	.dbg	line, "game.c", 172
L000A:	ldx     #$00
	lda     #$1A
	sta     _iFrame
	stx     _iFrame+1
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 165
L0004:	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002
;
; if(which_bg == 9){
;
	.dbg	line, "game.c", 178
L000E:	lda     _which_bg
	cmp     #$09
	bne     L000C
;
; collision = check_collision(&knight, &winBlock);
;
	.dbg	line, "game.c", 179
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     #<(_winBlock)
	ldx     #>(_winBlock)
	jsr     _check_collision
	sta     _collision
;
; if (collision){win();}}
;
	.dbg	line, "game.c", 180
	lda     _collision
	beq     L000C
	jmp     _win
;
; }
;
	.dbg	line, "game.c", 181
L000C:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

	.dbg	func, "draw_bg", "00", extern, "_draw_bg"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 184
	jsr     _ppu_off
;
; p_maps = All_Collision_Maps[which_bg];
;
	.dbg	line, "game.c", 186
	ldx     #$00
	lda     _which_bg
	asl     a
	bcc     L0025
	inx
	clc
L0025:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy (c_map, p_maps, 240);
;
	.dbg	line, "game.c", 188
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; vram_adr(NAMETABLE_A);
;
	.dbg	line, "game.c", 191
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
	.dbg	line, "game.c", 195
	lda     #$00
	sta     _temp_y
L0026:	lda     _temp_y
	cmp     #$0F
	jcs     L0003
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	.dbg	line, "game.c", 196
	lda     #$00
	sta     _temp_x
L0027:	lda     _temp_x
	cmp     #$10
	bcs     L0029
;
; temp1 = (temp_y << 4) + temp_x;
;
	.dbg	line, "game.c", 197
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1] == 1){
;
	.dbg	line, "game.c", 199
	ldy     _temp1
	lda     _c_map,y
	cmp     #$01
	bne     L000A
;
; vram_put(0x02); // wall
;
	.dbg	line, "game.c", 200
	lda     #$02
	jsr     _vram_put
;
; vram_put(0x02);
;
	.dbg	line, "game.c", 201
	lda     #$02
;
; else if(c_map[temp1] == 2){
;
	.dbg	line, "game.c", 203
	jmp     L0023
L000A:	ldy     _temp1
	lda     _c_map,y
	cmp     #$02
	bne     L000D
;
; vram_put(0x03); // Pink
;
	.dbg	line, "game.c", 204
	lda     #$03
	jsr     _vram_put
;
; vram_put(0x03);
;
	.dbg	line, "game.c", 205
	lda     #$03
;
; else if(c_map[temp1] == 3){
;
	.dbg	line, "game.c", 207
	jmp     L0023
L000D:	ldy     _temp1
	lda     _c_map,y
	cmp     #$03
	bne     L0028
;
; vram_put(0x07); // Heart 
;
	.dbg	line, "game.c", 208
	lda     #$07
	jsr     _vram_put
;
; vram_put(0x08); // Heart 
;
	.dbg	line, "game.c", 209
	lda     #$08
;
; else{
;
	.dbg	line, "game.c", 211
	jmp     L0023
;
; vram_put(0); // blank
;
	.dbg	line, "game.c", 212
L0028:	lda     #$00
	jsr     _vram_put
;
; vram_put(0);
;
	.dbg	line, "game.c", 213
	lda     #$00
L0023:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	.dbg	line, "game.c", 196
	inc     _temp_x
	jmp     L0027
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	.dbg	line, "game.c", 218
L0029:	lda     #$00
	sta     _temp_x
L002A:	lda     _temp_x
	cmp     #$10
	bcs     L002C
;
; temp1 = (temp_y << 4) + temp_x;
;
	.dbg	line, "game.c", 219
	lda     _temp_y
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _temp_x
	sta     _temp1
;
; if(c_map[temp1] == 1){
;
	.dbg	line, "game.c", 221
	ldy     _temp1
	lda     _c_map,y
	cmp     #$01
	bne     L0017
;
; vram_put(0x02); // wall
;
	.dbg	line, "game.c", 222
	lda     #$02
	jsr     _vram_put
;
; vram_put(0x02);
;
	.dbg	line, "game.c", 223
	lda     #$02
;
; else if(c_map[temp1] == 2){
;
	.dbg	line, "game.c", 225
	jmp     L0024
L0017:	ldy     _temp1
	lda     _c_map,y
	cmp     #$02
	bne     L001A
;
; vram_put(0x03); // Pink
;
	.dbg	line, "game.c", 226
	lda     #$03
	jsr     _vram_put
;
; vram_put(0x03);
;
	.dbg	line, "game.c", 227
	lda     #$03
;
; else if(c_map[temp1] == 3){
;
	.dbg	line, "game.c", 229
	jmp     L0024
L001A:	ldy     _temp1
	lda     _c_map,y
	cmp     #$03
	bne     L002B
;
; vram_put(0x17); // Heart 
;
	.dbg	line, "game.c", 230
	lda     #$17
	jsr     _vram_put
;
; vram_put(0x18);
;
	.dbg	line, "game.c", 231
	lda     #$18
;
; else{
;
	.dbg	line, "game.c", 233
	jmp     L0024
;
; vram_put(0); // blank
;
	.dbg	line, "game.c", 234
L002B:	lda     #$00
	jsr     _vram_put
;
; vram_put(0);
;
	.dbg	line, "game.c", 235
	lda     #$00
L0024:	jsr     _vram_put
;
; for(temp_x = 0; temp_x < 16; ++temp_x){
;
	.dbg	line, "game.c", 218
	inc     _temp_x
	jmp     L002A
;
; for(temp_y = 0; temp_y < 15; ++temp_y){
;
	.dbg	line, "game.c", 195
L002C:	inc     _temp_y
	jmp     L0026
;
; loadEnemyData();
;
	.dbg	line, "game.c", 239
L0003:	jsr     _loadEnemyData
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "game.c", 241
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgCollision: near

	.dbg	func, "bgCollision", "00", extern, "_bgCollision"

.segment	"CODE"

;
; collision_L = 0;
;
	.dbg	line, "game.c", 247
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	.dbg	line, "game.c", 248
	sta     _collision_R
;
; collision_U = 0;
;
	.dbg	line, "game.c", 249
	sta     _collision_U
;
; collision_D = 0;
;
	.dbg	line, "game.c", 250
	sta     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 252
	lda     _knight
	sta     _temp_x
;
; temp_y = knight.y; // top side
;
	.dbg	line, "game.c", 253
	lda     _knight+1
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 255
	cmp     #$F0
	bcc     L0015
;
; }
;
	.dbg	line, "game.c", 289
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
	.dbg	line, "game.c", 258
L0015:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	.dbg	line, "game.c", 259
	ldy     _coordinates
	lda     _c_map,y
	beq     L0012
;
; ++collision_L;
;
	.dbg	line, "game.c", 260
	inc     _collision_L
;
; ++collision_U;
;
	.dbg	line, "game.c", 261
	inc     _collision_U
;
; temp_x = knight.x + knight.width; // right side
;
	.dbg	line, "game.c", 264
L0012:	lda     _knight
	clc
	adc     _knight+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	.dbg	line, "game.c", 266
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 267
	ldy     _coordinates
	lda     _c_map,y
	beq     L0013
;
; ++collision_R;
;
	.dbg	line, "game.c", 268
	inc     _collision_R
;
; ++collision_U;
;
	.dbg	line, "game.c", 269
	inc     _collision_U
;
; temp_y = knight.y + knight.height; // bottom side
;
	.dbg	line, "game.c", 272
L0013:	lda     _knight+1
	clc
	adc     _knight+3
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 273
	cmp     #$F0
	bcs     L000A
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	.dbg	line, "game.c", 276
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 277
	ldy     _coordinates
	lda     _c_map,y
	beq     L0014
;
; ++collision_R;
;
	.dbg	line, "game.c", 278
	inc     _collision_R
;
; ++collision_D;
;
	.dbg	line, "game.c", 279
	inc     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 282
L0014:	lda     _knight
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	.dbg	line, "game.c", 284
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 285
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_L;
;
	.dbg	line, "game.c", 286
	inc     _collision_L
;
; ++collision_D;
;
	.dbg	line, "game.c", 287
	inc     _collision_D
;
; }
;
	.dbg	line, "game.c", 289
L000A:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadEnemyData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadEnemyData: near

	.dbg	func, "loadEnemyData", "00", extern, "_loadEnemyData"

.segment	"CODE"

;
; E[0].x = 64;
;
	.dbg	line, "game.c", 292
	lda     #$40
	sta     _E
;
; E[0].y = 64;
;
	.dbg	line, "game.c", 293
	sta     _E+1
;
; E[0].width = 15;
;
	.dbg	line, "game.c", 294
	lda     #$0F
	sta     _E+2
;
; E[0].height = 15;
;
	.dbg	line, "game.c", 295
	sta     _E+3
;
; E[1].x = 128;
;
	.dbg	line, "game.c", 297
	lda     #$80
	sta     _E+4
;
; E[1].y = 128;
;
	.dbg	line, "game.c", 298
	sta     _E+5
;
; E[1].width = 15;
;
	.dbg	line, "game.c", 299
	lda     #$0F
	sta     _E+6
;
; E[1].height = 15;
;
	.dbg	line, "game.c", 300
	sta     _E+7
;
; E[2].x = 420;
;
	.dbg	line, "game.c", 302
	lda     #$A4
	sta     _E+8
;
; E[2].y = 64;
;
	.dbg	line, "game.c", 303
	lda     #$40
	sta     _E+9
;
; E[2].width = 15;
;
	.dbg	line, "game.c", 304
	lda     #$0F
	sta     _E+10
;
; E[2].height = 15;
;
	.dbg	line, "game.c", 305
	sta     _E+11
;
; numberOfE = 3;
;
	.dbg	line, "game.c", 309
	ldx     #$00
	lda     #$03
	sta     _numberOfE
	stx     _numberOfE+1
;
; }
;
	.dbg	line, "game.c", 312
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateHealth (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateHealth: near

	.dbg	func, "updateHealth", "00", extern, "_updateHealth"

.segment	"CODE"

;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 315
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _health
	lda     _i+1
	sbc     _health+1
	bvc     L0007
	eor     #$80
L0007:	bpl     L0003
;
; oam_spr((i*8), 0, 0x80, 1);
;
	.dbg	line, "game.c", 316
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 315
	inc     _i
	bne     L0002
	inc     _i+1
	jmp     L0002
;
; }
;
	.dbg	line, "game.c", 319
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loseCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loseCheck: near

	.dbg	func, "loseCheck", "00", extern, "_loseCheck"

.segment	"CODE"

;
; if(health <= 0){
;
	.dbg	line, "game.c", 333
	lda     _health
	cmp     #$01
	lda     _health+1
	sbc     #$00
	bvc     L0003
	eor     #$80
L0003:	bmi     L0009
;
; }
;
	.dbg	line, "game.c", 369
	rts
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 335
L0009:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 339
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 340
	jsr     _clearScreen
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 341
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	.dbg	line, "game.c", 342
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$09
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 343
	lda     #$04
	jsr     _pal_bright
;
; i = 0;
;
	.dbg	line, "game.c", 344
	lda     #$00
	sta     _i
	sta     _i+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 346
L0004:	jsr     _ppu_wait_nmi
;
; i++;
;
	.dbg	line, "game.c", 347
	inc     _i
	bne     L0007
	inc     _i+1
;
; }while(i <= 180);
;
	.dbg	line, "game.c", 348
L0007:	lda     _i
	cmp     #$B5
	lda     _i+1
	sbc     #$00
	bvc     L0008
	eor     #$80
L0008:	bmi     L0004
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 353
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off(); // screen off //make this better and fade in/out after saying you died
;
	.dbg	line, "game.c", 354
	jsr     _ppu_off
;
; clearScreen();
;
	.dbg	line, "game.c", 355
	jsr     _clearScreen
;
; which_bg = 0;
;
	.dbg	line, "game.c", 356
	lda     #$00
	sta     _which_bg
;
; mapPos = center;
;
	.dbg	line, "game.c", 357
	lda     _center+1
	sta     _mapPos+1
	lda     _center
	sta     _mapPos
;
; draw_bg();
;
	.dbg	line, "game.c", 358
	jsr     _draw_bg
;
; health = maxHealth;
;
	.dbg	line, "game.c", 359
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; stamina = maxStam;
;
	.dbg	line, "game.c", 360
	lda     _maxStam+1
	sta     _stamina+1
	lda     _maxStam
	sta     _stamina
;
; knight.x = 120;
;
	.dbg	line, "game.c", 361
	lda     #$78
	sta     _knight
;
; knight.y = 112;
;
	.dbg	line, "game.c", 362
	lda     #$70
	sta     _knight+1
;
; flasks = 3;
;
	.dbg	line, "game.c", 363
	ldx     #$00
	lda     #$03
	sta     _flasks
	stx     _flasks+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 364
	jsr     _ppu_wait_nmi
;
; ppu_on_all();
;
	.dbg	line, "game.c", 365
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 366
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ nextRoom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nextRoom: near

	.dbg	func, "nextRoom", "00", extern, "_nextRoom"

.segment	"CODE"

;
; if(knight.y < 13){
;
	.dbg	line, "game.c", 372
	lda     _knight+1
	cmp     #$0D
	bcs     L000C
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 373
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 221;
;
	.dbg	line, "game.c", 374
	lda     #$DD
	sta     _knight+1
;
; mapPos -= mapWidth;
;
	.dbg	line, "game.c", 375
	lda     _mapWidth
	eor     #$FF
	sec
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	eor     #$FF
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 376
	lda     _mapPos
;
; else if(knight.y > 221){
;
	.dbg	line, "game.c", 383
	jmp     L001B
L000C:	lda     _knight+1
	cmp     #$DE
	bcc     L000D
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 384
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 13;
;
	.dbg	line, "game.c", 385
	lda     #$0D
	sta     _knight+1
;
; mapPos += mapWidth;
;
	.dbg	line, "game.c", 386
	lda     _mapWidth
	clc
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 387
	lda     _mapPos
;
; else if(knight.x <= 3 ){
;
	.dbg	line, "game.c", 394
	jmp     L001B
L000D:	lda     _knight
	cmp     #$04
	bcs     L000E
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 395
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 236;
;
	.dbg	line, "game.c", 396
	lda     #$EC
	sta     _knight
;
; mapPos=mapPos-1;
;
	.dbg	line, "game.c", 397
	lda     _mapPos
	ldx     _mapPos+1
	sec
	sbc     #$01
	bcs     L000A
	dex
;
; else if(knight.x >= 237){
;
	.dbg	line, "game.c", 405
	jmp     L000A
L000E:	lda     _knight
	cmp     #$ED
	bcc     L0009
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 406
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 4;//can't go less than 0, so have to be a pixel over
;
	.dbg	line, "game.c", 407
	lda     #$04
	sta     _knight
;
; mapPos=mapPos+1;
;
	.dbg	line, "game.c", 408
	lda     _mapPos
	ldx     _mapPos+1
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	sta     _mapPos
	stx     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 409
L001B:	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 410
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 411
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 412
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 413
	lda     #$04
	jsr     _pal_bright
;
; loadRoomData();
;
	.dbg	line, "game.c", 414
	jmp     _loadRoomData
;
; }
;
	.dbg	line, "game.c", 418
L0009:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

	.dbg	func, "clearScreen", "00", extern, "_clearScreen"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 322
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0));//set to top corner
;
	.dbg	line, "game.c", 323
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; i = 0;
;
	.dbg	line, "game.c", 324
	lda     #$00
	sta     _i
	sta     _i+1
;
; vram_put(0);
;
	.dbg	line, "game.c", 326
L0008:	jsr     _vram_put
;
; i++;
;
	.dbg	line, "game.c", 327
	inc     _i
	bne     L0005
	inc     _i+1
;
; }while(i < 960);//32*30
;
	.dbg	line, "game.c", 328
L0005:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	bcs     L0008
;
; ppu_on_all();
;
	.dbg	line, "game.c", 329
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ win (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_win: near

	.dbg	func, "win", "00", extern, "_win"

.segment	"CODE"

;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 421
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 423
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 424
	jsr     _clearScreen
;
; loop = 0;
;
	.dbg	line, "game.c", 425
	lda     #$00
	sta     _loop
	sta     _loop+1
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 426
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(winTxt,sizeof(winTxt));
;
	.dbg	line, "game.c", 427
	lda     #<(_winTxt)
	ldx     #>(_winTxt)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 428
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadRoomData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadRoomData: near

	.dbg	func, "loadRoomData", "00", extern, "_loadRoomData"

.segment	"CODE"

;
; if(which_bg == 9) {numberOfE = 0;}
;
	.dbg	line, "game.c", 434
	ldx     #$00
	lda     _which_bg
	cmp     #$09
	bne     L0005
	txa
;
; else{numberOfE = 3;}
;
	.dbg	line, "game.c", 435
	jmp     L0006
L0005:	lda     #$03
L0006:	sta     _numberOfE
	stx     _numberOfE+1
;
; }
;
	.dbg	line, "game.c", 436
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateStamina (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStamina: near

	.dbg	func, "updateStamina", "00", extern, "_updateStamina"

.segment	"CODE"

;
; if(stamina < maxStam && regenTimer <= 0){
;
	.dbg	line, "game.c", 439
	lda     _stamina
	cmp     _maxStam
	lda     _stamina+1
	sbc     _maxStam+1
	bvc     L000F
	eor     #$80
L000F:	bpl     L0002
	lda     _regenTimer
	cmp     #$01
	lda     _regenTimer+1
	sbc     #$00
	bvc     L0004
	eor     #$80
L0004:	bpl     L0002
;
; stamina++;
;
	.dbg	line, "game.c", 440
	inc     _stamina
	bne     L0007
	inc     _stamina+1
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 441
L0007:	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; }else{regenTimer -= 1;}
;
	.dbg	line, "game.c", 442
	jmp     L0014
L0002:	lda     _regenTimer
	sec
	sbc     #$01
	sta     _regenTimer
	bcs     L0014
	dec     _regenTimer+1
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 444
L0014:	lda     #$00
	sta     _i
	sta     _i+1
L000A:	lda     _i
	cmp     _stamina
	lda     _i+1
	sbc     _stamina+1
	bvc     L0010
	eor     #$80
L0010:	bpl     L000B
;
; oam_spr((i*8), 8, 0x90, 1);
;
	.dbg	line, "game.c", 445
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 444
	inc     _i
	bne     L000A
	inc     _i+1
	jmp     L000A
;
; }
;
	.dbg	line, "game.c", 447
L000B:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ selBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_selBtn: near

	.dbg	func, "selBtn", "00", extern, "_selBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_SELECT){
;
	.dbg	line, "game.c", 491
	lda     _pad1_new
	and     #$20
	beq     L0002
;
; health -= 1;
;
	.dbg	line, "game.c", 492
	lda     _health
	sec
	sbc     #$01
	sta     _health
	bcs     L0003
	dec     _health+1
;
; stamina -=1;
;
	.dbg	line, "game.c", 493
L0003:	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0004
	dec     _stamina+1
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 494
L0004:	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; }
;
	.dbg	line, "game.c", 497
L0002:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ stBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_stBtn: near

	.dbg	func, "stBtn", "00", extern, "_stBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_START && flasks > 0){
;
	.dbg	line, "game.c", 484
	lda     _pad1_new
	and     #$10
	beq     L0009
	lda     _flasks
	cmp     #$01
	lda     _flasks+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bmi     L000A
L0009:	rts
;
; flasks -=1;
;
	.dbg	line, "game.c", 485
L000A:	lda     _flasks
	sec
	sbc     #$01
	sta     _flasks
	bcs     L0007
	dec     _flasks+1
;
; health = maxHealth; //placeholder
;
	.dbg	line, "game.c", 486
L0007:	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; }
;
	.dbg	line, "game.c", 488
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ aBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_aBtn: near

	.dbg	func, "aBtn", "00", extern, "_aBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_A ){
;
	.dbg	line, "game.c", 450
	lda     _pad1_new
	and     #$80
	beq     L0003
;
; if(stamina >= 1){
;
	.dbg	line, "game.c", 451
	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L0003
;
; switch(dir){
;
	.dbg	line, "game.c", 452
	lda     _dir
	ldx     _dir+1
;
; }
;
	.dbg	line, "game.c", 465
	cpx     #$00
	bne     L0006
	cmp     #$01
	beq     L0007
	cmp     #$02
	beq     L0008
	cmp     #$03
	beq     L0009
	cmp     #$04
	beq     L000A
	jmp     L0006
;
; playerSprite=upAttSprite;
;
	.dbg	line, "game.c", 454
L0007:	lda     #>(_upAttSprite)
	sta     _playerSprite+1
	lda     #<(_upAttSprite)
;
; break;
;
	.dbg	line, "game.c", 455
	jmp     L000C
;
; playerSprite=rightAttSprite;
;
	.dbg	line, "game.c", 457
L0008:	lda     #>(_rightAttSprite)
	sta     _playerSprite+1
	lda     #<(_rightAttSprite)
;
; break;
;
	.dbg	line, "game.c", 458
	jmp     L000C
;
; playerSprite=downAttSprite;
;
	.dbg	line, "game.c", 460
L0009:	lda     #>(_downAttSprite)
	sta     _playerSprite+1
	lda     #<(_downAttSprite)
;
; break;
;
	.dbg	line, "game.c", 461
	jmp     L000C
;
; playerSprite=leftAttSprite;
;
	.dbg	line, "game.c", 463
L000A:	lda     #>(_leftAttSprite)
	sta     _playerSprite+1
	lda     #<(_leftAttSprite)
L000C:	sta     _playerSprite
;
; stamina-=1;
;
	.dbg	line, "game.c", 466
L0006:	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0003
	dec     _stamina+1
;
; }
;
	.dbg	line, "game.c", 470
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bBtn: near

	.dbg	func, "bBtn", "00", extern, "_bBtn"

.segment	"CODE"

;
; roll = 0;
;
	.dbg	line, "game.c", 473
	lda     #$00
	sta     _roll
	sta     _roll+1
;
; if(pad1_new & PAD_B){
;
	.dbg	line, "game.c", 474
	lda     _pad1_new
	and     #$40
	beq     L0003
;
; if (stamina >= 1){
;
	.dbg	line, "game.c", 475
	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L0003
;
; roll = 1;
;
	.dbg	line, "game.c", 476
	ldx     #$00
	lda     #$01
	sta     _roll
	stx     _roll+1
;
; }
;
	.dbg	line, "game.c", 479
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 14
	jsr     _ppu_off
;
; pal_bg(paletteBg); // load the BG palette
;
	.dbg	line, "game.c", 16
	lda     #<(_paletteBg)
	ldx     #>(_paletteBg)
	jsr     _pal_bg
;
; pal_spr(paletteSp);//load the sprite palette
;
	.dbg	line, "game.c", 17
	lda     #<(_paletteSp)
	ldx     #>(_paletteSp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "game.c", 18
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(3,3)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 21
	ldx     #$20
	lda     #$63
	jsr     _vram_adr
;
; clearScreen();
;
	.dbg	line, "game.c", 22
	jsr     _clearScreen
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	.dbg	line, "game.c", 23
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; mapPos = center; //setting the mapPos to the center of map
;
	.dbg	line, "game.c", 25
	lda     _center+1
	sta     _mapPos+1
	lda     _center
	sta     _mapPos
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 26
	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 27
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; draw_bg();
;
	.dbg	line, "game.c", 28
	jsr     _draw_bg
;
; while (loop){
;
	.dbg	line, "game.c", 35
	jmp     L0005
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 38
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 39
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "game.c", 40
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; move();//move the player
;
	.dbg	line, "game.c", 42
	jsr     _move
;
; nextRoom();
;
	.dbg	line, "game.c", 43
	jsr     _nextRoom
;
; testCollision();//sprite collisions
;
	.dbg	line, "game.c", 44
	jsr     _testCollision
;
; drawSprites();
;
	.dbg	line, "game.c", 45
	jsr     _drawSprites
;
; stBtn();
;
	.dbg	line, "game.c", 46
	jsr     _stBtn
;
; selBtn();//currently select
;
	.dbg	line, "game.c", 47
	jsr     _selBtn
;
; updateHealth();
;
	.dbg	line, "game.c", 48
	jsr     _updateHealth
;
; updateStamina();
;
	.dbg	line, "game.c", 49
	jsr     _updateStamina
;
; loseCheck();
;
	.dbg	line, "game.c", 50
	jsr     _loseCheck
;
; aBtn();
;
	.dbg	line, "game.c", 51
	jsr     _aBtn
;
; bBtn();
;
	.dbg	line, "game.c", 52
	jsr     _bBtn
;
; if (iFrame > 0){
;
	.dbg	line, "game.c", 54
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvs     L0006
	eor     #$80
L0006:	bpl     L0005
;
; iFrame -= 1;
;
	.dbg	line, "game.c", 55
	lda     _iFrame
	sec
	sbc     #$01
	sta     _iFrame
	bcs     L0005
	dec     _iFrame+1
;
; while (loop){
;
	.dbg	line, "game.c", 35
L0005:	lda     _loop
	ora     _loop+1
	bne     L0002
;
; while (1){ //prevents crashes on "win"
;
	.dbg	line, "game.c", 58
L000B:	jmp     L000B

	.dbg	line
.endproc

