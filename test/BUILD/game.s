;
; File generated by cc65 v 2.19 - Git bb1b5c3
;
	.fopt		compiler,"cc65 v 2.19 - Git bb1b5c3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "game.c", 12996, 1710109482
	.dbg		file, "LIB/neslib.h", 9196, 1701627949
	.dbg		file, "LIB/nesdoug.h", 6756, 1701627949
	.dbg		file, "sprites.h", 3049, 1710099749
	.dbg		file, "game.h", 2626, 1710105151
	.dbg		file, "BG/maps.c", 8994, 1710095544
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_nmi", "00", extern, "_ppu_wait_nmi"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_spr", "00", extern, "_oam_spr"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_spr", "00", extern, "_bank_spr"
	.dbg		sym, "rand8", "00", extern, "_rand8"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_put", "00", extern, "_vram_put"
	.dbg		sym, "vram_write", "00", extern, "_vram_write"
	.dbg		sym, "memcpy", "00", extern, "_memcpy"
	.dbg		sym, "set_vram_buffer", "00", extern, "_set_vram_buffer"
	.dbg		sym, "get_pad_new", "00", extern, "_get_pad_new"
	.dbg		sym, "check_collision", "00", extern, "_check_collision"
	.dbg		sym, "pal_fade_to", "00", extern, "_pal_fade_to"
	.dbg		sym, "set_scroll_y", "00", extern, "_set_scroll_y"
	.dbg		sym, "get_ppu_addr", "00", extern, "_get_ppu_addr"
	.dbg		sym, "set_data_pointer", "00", extern, "_set_data_pointer"
	.dbg		sym, "set_mt_pointer", "00", extern, "_set_mt_pointer"
	.dbg		sym, "buffer_1_mt", "00", extern, "_buffer_1_mt"
	.dbg		sym, "buffer_4_mt", "00", extern, "_buffer_4_mt"
	.dbg		sym, "flush_vram_update2", "00", extern, "_flush_vram_update2"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_1_mt
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_upSprite
	.export		_downSprite
	.export		_leftSprite
	.export		_rightSprite
	.export		_upAttSprite
	.export		_downAttSprite
	.export		_leftAttSprite
	.export		_rightAttSprite
	.export		_upSwd
	.export		_rightSwd
	.export		_rollSprite
	.export		_hollowSprite
	.export		_fire
	.export		_wolfL
	.export		_wolfR
	.export		_null
	.export		_srdU
	.export		_srdD
	.export		_srdR
	.export		_srdL
	.export		_paletteBg
	.export		_paletteSp
	.export		_map0
	.export		_map1
	.export		_map2
	.export		_map3
	.export		_map4
	.export		_map5
	.export		_map6
	.export		_map7
	.export		_map8
	.export		_winRoom
	.export		_wolfRoom
	.export		_worldMap
	.export		_center
	.export		_mapPos
	.export		_mapWidth
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_text
	.export		_winTxt
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_playerSprite
	.export		_swordSpr
	.export		_i
	.export		_j
	.export		_health
	.export		_stamina
	.export		_maxHealth
	.export		_maxStam
	.export		_regenTimer
	.export		_timerSpeed
	.export		_iFrame
	.export		_loop
	.export		_roll
	.export		_rHVal
	.export		_rVVal
	.export		_dir
	.export		_canMove
	.export		_flasks
	.export		_swdTime
	.export		_knight
	.export		_sword
	.export		_numberOfE
	.export		_E
	.export		_tempE
	.export		_winBlock
	.export		_wolf
	.export		_c_map
	.export		_All_Collision_Maps
	.export		_drawSprites
	.export		_move
	.export		_testCollision
	.export		_draw_bg
	.export		_bgCollision
	.export		_loadEnemyData
	.export		_updateHealth
	.export		_loseCheck
	.export		_nextRoom
	.export		_clearScreen
	.export		_win
	.export		_loadRoomData
	.export		_updateStamina
	.export		_selBtn
	.export		_stBtn
	.export		_aBtn
	.export		_bBtn
	.export		_eBgCol
	.export		_wait
	.export		_mapTiles
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_posChk
	.export		_pause
	.export		_main

.segment	"DATA"

_mapWidth:
	.word	$0005
_text:
	.byte	$59,$6F,$75,$20,$44,$69,$65,$64,$00
_winTxt:
	.byte	$59,$6F,$75,$20,$57,$69,$6E,$00
_health:
	.word	$0008
_stamina:
	.word	$0008
_maxHealth:
	.word	$0008
_maxStam:
	.word	$0008
_timerSpeed:
	.word	$0046
_iFrame:
	.word	$0000
_loop:
	.word	$0001
_roll:
	.word	$0000
_rHVal:
	.word	$0000
_rVVal:
	.word	$0000
_dir:
	.word	$0003
_canMove:
	.word	$0001
_flasks:
	.word	$0003
_swdTime:
	.word	$0005
_knight:
	.byte	$28
	.byte	$3E
	.byte	$0F
	.byte	$0F
_sword:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$0F
_numberOfE:
	.word	$0003
_winBlock:
	.byte	$78
	.byte	$70
	.byte	$0F
	.byte	$07
_wolf:
	.byte	$78
	.byte	$C8
	.byte	$20
	.byte	$18
_mapTiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$01
_posChk:
	.word	$0000
_pause:
	.word	$0000

.segment	"RODATA"

_upSprite:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_downSprite:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_leftSprite:
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$40
	.byte	$80
_rightSprite:
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$80
_upAttSprite:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_downAttSprite:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_leftAttSprite:
	.byte	$08
	.byte	$00
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$40
	.byte	$80
_rightAttSprite:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$00
	.byte	$80
_upSwd:
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$80
_rightSwd:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_rollSprite:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_hollowSprite:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_fire:
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$82
	.byte	$02
	.byte	$80
_wolfL:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$17
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$29
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$2A
	.byte	$00
	.byte	$17
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$80
_wolfR:
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$1B
	.byte	$40
	.byte	$18
	.byte	$10
	.byte	$28
	.byte	$40
	.byte	$10
	.byte	$10
	.byte	$29
	.byte	$40
	.byte	$08
	.byte	$10
	.byte	$2A
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$2B
	.byte	$40
	.byte	$80
_null:
	.byte	$80
_srdU:
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$80
_srdD:
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$80
	.byte	$80
_srdR:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_srdL:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$40
	.byte	$80
_paletteBg:
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$16
	.byte	$0F
	.byte	$17
	.byte	$25
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_paletteSp:
	.byte	$25
	.byte	$00
	.byte	$0C
	.byte	$07
	.byte	$30
	.byte	$16
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$06
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_map8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_winRoom:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_wolfRoom:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_worldMap:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
_center:
	.word	$000C
_All_Collision_Maps:
	.addr	_map0
	.addr	_map1
	.addr	_map2
	.addr	_map3
	.addr	_map4
	.addr	_map5
	.addr	_map6
	.addr	_map7
	.addr	_map8
	.addr	_winRoom

.segment	"BSS"

_mapPos:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_which_bg:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_playerSprite:
	.res	2,$00
_swordSpr:
	.res	2,$00
_i:
	.res	2,$00
_j:
	.res	2,$00
_regenTimer:
	.res	2,$00
_E:
	.res	12,$00
_tempE:
	.res	12,$00
_c_map:
	.res	240,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

	.dbg	func, "drawSprites", "00", extern, "_drawSprites"

.segment	"CODE"

;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	.dbg	line, "game.c", 128
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	.dbg	line, "game.c", 130
	jsr     _oam_clear
;
; bank_spr(1);//switch to player spritesheet
;
	.dbg	line, "game.c", 131
	lda     #$01
	jsr     _bank_spr
;
; {oam_meta_spr(knight.x, knight.y, playerSprite);}
;
	.dbg	line, "game.c", 134
	jsr     decsp2
	lda     _knight
	ldy     #$01
	sta     (sp),y
	lda     _knight+1
	dey
	sta     (sp),y
	lda     _playerSprite
	ldx     _playerSprite+1
	jsr     _oam_meta_spr
;
; oam_meta_spr(sword.x, sword.y, swordSpr);
;
	.dbg	line, "game.c", 135
	jsr     decsp2
	lda     _sword
	ldy     #$01
	sta     (sp),y
	lda     _sword+1
	dey
	sta     (sp),y
	lda     _swordSpr
	ldx     _swordSpr+1
	jsr     _oam_meta_spr
;
; if(which_bg == 9){
;
	.dbg	line, "game.c", 137
	lda     _which_bg
	cmp     #$09
	bne     L000A
;
; oam_meta_spr(winBlock.x, winBlock.y , fire);
;
	.dbg	line, "game.c", 138
	jsr     decsp2
	lda     _winBlock
	ldy     #$01
	sta     (sp),y
	lda     _winBlock+1
	dey
	sta     (sp),y
	lda     #<(_fire)
	ldx     #>(_fire)
	jmp     _oam_meta_spr
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 140
L000A:	lda     #$00
	sta     _i
	sta     _i+1
L0004:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0009
	eor     #$80
L0009:	bpl     L0005
;
; oam_meta_spr(E[i].x, E[i].y , hollowSprite);
;
	.dbg	line, "game.c", 141
	jsr     decsp2
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_hollowSprite)
	ldx     #>(_hollowSprite)
	jsr     _oam_meta_spr
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 140
	inc     _i
	bne     L0004
	inc     _i+1
	jmp     L0004
;
; }
;
	.dbg	line, "game.c", 145
L0005:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move: near

	.dbg	func, "move", "00", extern, "_move"

.segment	"CODE"

;
; if(roll){
;
	.dbg	line, "game.c", 77
	lda     _roll
	ora     _roll+1
	beq     L0002
;
; knight.x += rHVal;
;
	.dbg	line, "game.c", 78
	lda     _rHVal
	clc
	adc     _knight
	sta     _knight
;
; knight.y += rVVal;
;
	.dbg	line, "game.c", 79
	lda     _rVVal
	clc
	adc     _knight+1
	sta     _knight+1
;
; bgCollision();//cant roll through walls
;
	.dbg	line, "game.c", 81
	jsr     _bgCollision
;
; if(collision_R) knight.x -= 3;
;
	.dbg	line, "game.c", 82
	lda     _collision_R
	beq     L0003
	lda     _knight
	sec
	sbc     #$03
	sta     _knight
;
; if(collision_L) knight.x += 3;
;
	.dbg	line, "game.c", 83
L0003:	lda     _collision_L
	beq     L0004
	lda     #$03
	clc
	adc     _knight
	sta     _knight
;
; if(collision_D) knight.y -= 3;
;
	.dbg	line, "game.c", 84
L0004:	lda     _collision_D
	beq     L0005
	lda     _knight+1
	sec
	sbc     #$03
	sta     _knight+1
;
; if(collision_U) knight.y += 3;
;
	.dbg	line, "game.c", 85
L0005:	lda     _collision_U
	bne     L001F
;
; }
;
	.dbg	line, "game.c", 125
	rts
;
; if(collision_U) knight.y += 3;
;
	.dbg	line, "game.c", 85
L001F:	lda     #$03
;
; else{
;
	.dbg	line, "game.c", 87
	jmp     L001E
;
; if(pad1 & PAD_LEFT){
;
	.dbg	line, "game.c", 88
L0002:	lda     _pad1
	and     #$02
	beq     L0017
;
; playerSprite = leftSprite;
;
	.dbg	line, "game.c", 89
	lda     #>(_leftSprite)
	sta     _playerSprite+1
	lda     #<(_leftSprite)
	sta     _playerSprite
;
; dir = 4;
;
	.dbg	line, "game.c", 90
	ldx     #$00
	lda     #$04
	sta     _dir
	stx     _dir+1
;
; knight.x -= 2;
;
	.dbg	line, "game.c", 91
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; rHVal = -3;
;
	.dbg	line, "game.c", 92
	dex
	lda     #$FD
;
; else if (pad1 & PAD_RIGHT){
;
	.dbg	line, "game.c", 96
	jmp     L0019
L0017:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0019
;
; playerSprite = rightSprite;
;
	.dbg	line, "game.c", 97
	lda     #>(_rightSprite)
	sta     _playerSprite+1
	lda     #<(_rightSprite)
	sta     _playerSprite
;
; dir = 2;
;
	.dbg	line, "game.c", 98
	lda     #$02
	sta     _dir
	stx     _dir+1
;
; knight.x += 2;
;
	.dbg	line, "game.c", 99
	clc
	adc     _knight
	sta     _knight
;
; rHVal = 3;
;
	.dbg	line, "game.c", 100
	lda     #$03
;
; }else{rHVal = 0;}
;
	.dbg	line, "game.c", 102
L0019:	sta     _rHVal
	stx     _rHVal+1
;
; bgCollision();
;
	.dbg	line, "game.c", 103
	jsr     _bgCollision
;
; if(collision_R) knight.x -= 2;
;
	.dbg	line, "game.c", 104
	lda     _collision_R
	beq     L000C
	lda     _knight
	sec
	sbc     #$02
	sta     _knight
;
; if(collision_L) knight.x += 2;
;
	.dbg	line, "game.c", 105
L000C:	lda     _collision_L
	beq     L000D
	lda     #$02
	clc
	adc     _knight
	sta     _knight
;
; if(pad1 & PAD_UP){
;
	.dbg	line, "game.c", 106
L000D:	lda     _pad1
	and     #$08
	beq     L001A
;
; playerSprite = upSprite;
;
	.dbg	line, "game.c", 107
	lda     #>(_upSprite)
	sta     _playerSprite+1
	lda     #<(_upSprite)
	sta     _playerSprite
;
; dir = 1;
;
	.dbg	line, "game.c", 108
	ldx     #$00
	lda     #$01
	sta     _dir
	stx     _dir+1
;
; knight.y -= 2;
;
	.dbg	line, "game.c", 109
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; rVVal = -3;
;
	.dbg	line, "game.c", 110
	dex
	lda     #$FD
;
; else if (pad1 & PAD_DOWN){
;
	.dbg	line, "game.c", 113
	jmp     L001C
L001A:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L001C
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 114
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; dir = 3;
;
	.dbg	line, "game.c", 115
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; knight.y += 2;
;
	.dbg	line, "game.c", 116
	lda     #$02
	clc
	adc     _knight+1
	sta     _knight+1
;
; rVVal = 3;
;
	.dbg	line, "game.c", 117
	lda     #$03
;
; }else{rVVal = 0; }
;
	.dbg	line, "game.c", 119
L001C:	sta     _rVVal
	stx     _rVVal+1
;
; bgCollision();
;
	.dbg	line, "game.c", 120
	jsr     _bgCollision
;
; if(collision_D) knight.y -= 2;
;
	.dbg	line, "game.c", 121
	lda     _collision_D
	beq     L0012
	lda     _knight+1
	sec
	sbc     #$02
	sta     _knight+1
;
; if(collision_U) knight.y += 2;
;
	.dbg	line, "game.c", 122
L0012:	lda     _collision_U
	beq     L0013
	lda     #$02
L001E:	clc
	adc     _knight+1
	sta     _knight+1
;
; }
;
	.dbg	line, "game.c", 125
L0013:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ testCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_testCollision: near

	.dbg	func, "testCollision", "00", extern, "_testCollision"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 148
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L002E
	eor     #$80
L002E:	asl     a
	lda     #$00
	jcc     L0038
;
; collision = check_collision(&knight, &E[i]); 
;
	.dbg	line, "game.c", 149
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 151
	lda     _collision
	beq     L0004
;
; E[i].y++;
;
	.dbg	line, "game.c", 152
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if (iFrame <= 0 && roll == 0){
;
	.dbg	line, "game.c", 154
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvc     L0009
	eor     #$80
L0009:	bpl     L0004
	lda     _roll
	ora     _roll+1
	bne     L0004
;
; health -= 1;
;
	.dbg	line, "game.c", 155
	lda     _health
	sec
	sbc     #$01
	sta     _health
	bcs     L000E
	dec     _health+1
;
; iFrame = 26;
;
	.dbg	line, "game.c", 156
L000E:	ldx     #$00
	lda     #$1A
	sta     _iFrame
	stx     _iFrame+1
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 148
L0004:	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 164
L0038:	sta     _i
	sta     _i+1
L000F:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L002F
	eor     #$80
L002F:	asl     a
	lda     #$00
	jcc     L003A
;
; collision = check_collision(&sword, &E[i]); 
;
	.dbg	line, "game.c", 165
	lda     #<(_sword)
	ldx     #>(_sword)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if (collision){
;
	.dbg	line, "game.c", 166
	lda     _collision
	jeq     L0011
;
; for(j = 0; j < numberOfE; j++){//grab a temp copy of the enemy array
;
	.dbg	line, "game.c", 167
	lda     #$00
	sta     _j
	sta     _j+1
L0015:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0030
	eor     #$80
L0030:	bpl     L0016
;
; tempE[j] = E[j];
;
	.dbg	line, "game.c", 168
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_tempE)
	tay
	txa
	adc     #>(_tempE)
	tax
	tya
	jsr     pushax
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
;
; for(j = 0; j < numberOfE; j++){//grab a temp copy of the enemy array
;
	.dbg	line, "game.c", 167
	inc     _j
	bne     L0015
	inc     _j+1
	jmp     L0015
;
; for(j = i; j < numberOfE; j++){
;
	.dbg	line, "game.c", 171
L0016:	lda     _i+1
	sta     _j+1
	lda     _i
	sta     _j
L001A:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0031
	eor     #$80
L0031:	bpl     L001B
;
; E[j] = tempE[j+1];
;
	.dbg	line, "game.c", 172
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	lda     _j
	ldx     _j+1
	clc
	adc     #$01
	bcc     L001F
	inx
L001F:	jsr     aslax2
	clc
	adc     #<(_tempE)
	tay
	txa
	adc     #>(_tempE)
	tax
	tya
	jsr     ldeaxi
	ldy     #$00
	jsr     steaxspidx
;
; for(j = i; j < numberOfE; j++){
;
	.dbg	line, "game.c", 171
	inc     _j
	bne     L001A
	inc     _j+1
	jmp     L001A
;
; numberOfE -= 1;
;
	.dbg	line, "game.c", 175
L001B:	lda     _numberOfE
	sec
	sbc     #$01
	sta     _numberOfE
	bcs     L0011
	dec     _numberOfE+1
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 164
L0011:	inc     _i
	jne     L000F
	inc     _i+1
	jmp     L000F
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 179
L003A:	sta     _i
	sta     _i+1
L0021:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0032
	eor     #$80
L0032:	jpl     L003B
;
; for(j = 1; j < numberOfE; j++){
;
	.dbg	line, "game.c", 180
	ldx     #$00
	lda     #$01
	sta     _j
	stx     _j+1
L0026:	lda     _j
	cmp     _numberOfE
	lda     _j+1
	sbc     _numberOfE+1
	bvc     L0033
	eor     #$80
L0033:	bpl     L0023
;
; collision = check_collision(&E[i], &E[i+j]); 
;
	.dbg	line, "game.c", 181
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	lda     _i
	clc
	adc     _j
	pha
	lda     _i+1
	adc     _j+1
	tax
	pla
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     _check_collision
	sta     _collision
;
; if(collision){
;
	.dbg	line, "game.c", 182
	lda     _collision
	beq     L0028
;
; E[j].y++;//move it down
;
	.dbg	line, "game.c", 183
	lda     _j
	ldx     _j+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; for(j = 1; j < numberOfE; j++){
;
	.dbg	line, "game.c", 180
L0028:	inc     _j
	bne     L0026
	inc     _j+1
	jmp     L0026
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 179
L0023:	inc     _i
	jne     L0021
	inc     _i+1
	jmp     L0021
;
; if(which_bg == 9){
;
	.dbg	line, "game.c", 188
L003B:	lda     _which_bg
	cmp     #$09
	bne     L002D
;
; collision = check_collision(&knight, &winBlock);
;
	.dbg	line, "game.c", 189
	lda     #<(_knight)
	ldx     #>(_knight)
	jsr     pushax
	lda     #<(_winBlock)
	ldx     #>(_winBlock)
	jsr     _check_collision
	sta     _collision
;
; if (collision){win();}
;
	.dbg	line, "game.c", 190
	lda     _collision
	beq     L002D
	jmp     _win
;
; }
;
	.dbg	line, "game.c", 192
L002D:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

	.dbg	func, "draw_bg", "00", extern, "_draw_bg"

.segment	"CODE"

;
; mapTiles[35] = 48+flasks; //Update the mapTiles to have the correct number of flasks
;
	.dbg	line, "game.c", 196
	lda     _flasks
	clc
	adc     #$30
	sta     _mapTiles+35
;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 198
	jsr     _ppu_off
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "game.c", 199
	jsr     _set_vram_buffer
;
; p_maps = All_Collision_Maps[which_bg];
;
	.dbg	line, "game.c", 201
	ldx     #$00
	lda     _which_bg
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     #<(_All_Collision_Maps)
	sta     ptr1
	txa
	adc     #>(_All_Collision_Maps)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _p_maps+1
	dey
	lda     (ptr1),y
	sta     _p_maps
;
; memcpy (c_map, p_maps, 240);
;
	.dbg	line, "game.c", 202
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _p_maps
	ldx     _p_maps+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; set_data_pointer(p_maps);
;
	.dbg	line, "game.c", 203
	lda     _p_maps
	ldx     _p_maps+1
	jsr     _set_data_pointer
;
; set_mt_pointer(mapTiles);
;
	.dbg	line, "game.c", 204
	lda     #<(_mapTiles)
	ldx     #>(_mapTiles)
	jsr     _set_mt_pointer
;
; for(y=0; ;y+=0x20){
;
	.dbg	line, "game.c", 205
	lda     #$00
L0010:	sta     _y
;
; for(x=0; ;x+=0x20){
;
	.dbg	line, "game.c", 206
	lda     #$00
L000F:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	.dbg	line, "game.c", 207
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	.dbg	line, "game.c", 208
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	.dbg	line, "game.c", 209
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	.dbg	line, "game.c", 210
	jsr     _flush_vram_update2
;
; if (x == 0xe0) break;
;
	.dbg	line, "game.c", 211
	lda     _x
	cmp     #$E0
	beq     L0012
;
; for(x=0; ;x+=0x20){
;
	.dbg	line, "game.c", 206
	lda     #$20
	clc
	adc     _x
	jmp     L000F
;
; if (y == 0xe0) break;
;
	.dbg	line, "game.c", 213
L0012:	lda     _y
	cmp     #$E0
	beq     L0004
;
; for(y=0; ;y+=0x20){
;
	.dbg	line, "game.c", 205
	lda     #$20
	clc
	adc     _y
	jmp     L0010
;
; loadEnemyData();
;
	.dbg	line, "game.c", 217
L0004:	jsr     _loadEnemyData
;
; ppu_on_all(); // turn on screen
;
	.dbg	line, "game.c", 218
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgCollision: near

	.dbg	func, "bgCollision", "00", extern, "_bgCollision"

.segment	"CODE"

;
; collision_L = 0;
;
	.dbg	line, "game.c", 225
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	.dbg	line, "game.c", 226
	sta     _collision_R
;
; collision_U = 0;
;
	.dbg	line, "game.c", 227
	sta     _collision_U
;
; collision_D = 0;
;
	.dbg	line, "game.c", 228
	sta     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 230
	lda     _knight
	sta     _temp_x
;
; temp_y = knight.y; // top side
;
	.dbg	line, "game.c", 231
	lda     _knight+1
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 233
	cmp     #$F0
	bcc     L0015
;
; }
;
	.dbg	line, "game.c", 269
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
	.dbg	line, "game.c", 236
L0015:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	.dbg	line, "game.c", 237
	ldy     _coordinates
	lda     _c_map,y
	beq     L0012
;
; ++collision_L;
;
	.dbg	line, "game.c", 238
	inc     _collision_L
;
; ++collision_U;
;
	.dbg	line, "game.c", 239
	inc     _collision_U
;
; temp_x = knight.x + knight.width; // right side
;
	.dbg	line, "game.c", 242
L0012:	lda     _knight
	clc
	adc     _knight+2
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	.dbg	line, "game.c", 244
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 245
	ldy     _coordinates
	lda     _c_map,y
	beq     L0013
;
; ++collision_R;
;
	.dbg	line, "game.c", 246
	inc     _collision_R
;
; ++collision_U;
;
	.dbg	line, "game.c", 247
	inc     _collision_U
;
; temp_y = knight.y + knight.height; // bottom side
;
	.dbg	line, "game.c", 250
L0013:	lda     _knight+1
	clc
	adc     _knight+3
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 251
	cmp     #$F0
	bcs     L000A
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	.dbg	line, "game.c", 254
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 255
	ldy     _coordinates
	lda     _c_map,y
	beq     L0014
;
; ++collision_R;
;
	.dbg	line, "game.c", 256
	inc     _collision_R
;
; ++collision_D;
;
	.dbg	line, "game.c", 257
	inc     _collision_D
;
; temp_x = knight.x; // left side
;
	.dbg	line, "game.c", 260
L0014:	lda     _knight
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	.dbg	line, "game.c", 262
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 263
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_L;
;
	.dbg	line, "game.c", 264
	inc     _collision_L
;
; ++collision_D;
;
	.dbg	line, "game.c", 265
	inc     _collision_D
;
; }
;
	.dbg	line, "game.c", 269
L000A:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadEnemyData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadEnemyData: near

	.dbg	func, "loadEnemyData", "00", extern, "_loadEnemyData"

.segment	"CODE"

;
; loadRoomData();
;
	.dbg	line, "game.c", 275
	jsr     _loadRoomData
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 276
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0013
	eor     #$80
L0013:	bmi     L0018
;
; }
;
	.dbg	line, "game.c", 289
	rts
;
; E[i].width = 15;//set size of enemy
;
	.dbg	line, "game.c", 277
L0018:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     #$0F
	ldy     #$02
	sta     (ptr1),y
;
; E[i].height = 15;
;
	.dbg	line, "game.c", 278
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     #$0F
	iny
	sta     (ptr1),y
;
; E[i].x = 4*rand8();
;
	.dbg	line, "game.c", 282
L0007:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	asl     a
	asl     a
	ldy     #$00
	jsr     staspidx
;
; }while(!(E[i].x <= 224 && E[i].x >= 16));
;
	.dbg	line, "game.c", 283
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     #$E1
	bcs     L0014
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	cmp     #$10
	bcs     L0015
L0014:	lda     #$00
	jmp     L000C
L0015:	lda     #$01
L000C:	jsr     bnega
	bne     L0007
;
; E[i].y = 4*rand8();
;
	.dbg	line, "game.c", 286
L0008:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	tay
	txa
	adc     #>(_E)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	asl     a
	asl     a
	ldy     #$01
	jsr     staspidx
;
; }while(!((E[i].y <= 208) && (E[i].y >= 32))); 
;
	.dbg	line, "game.c", 287
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$D1
	bcs     L0016
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	lda     (ptr1),y
	cmp     #$20
	bcs     L0017
L0016:	lda     #$00
	jmp     L0012
L0017:	tya
L0012:	jsr     bnega
	bne     L0008
;
; for(i = 0; i < numberOfE; i++){
;
	.dbg	line, "game.c", 276
	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateHealth (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateHealth: near

	.dbg	func, "updateHealth", "00", extern, "_updateHealth"

.segment	"CODE"

;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 292
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _health
	lda     _i+1
	sbc     _health+1
	bvc     L0007
	eor     #$80
L0007:	bpl     L0003
;
; oam_spr((i*8), 0, 0x80, 1);
;
	.dbg	line, "game.c", 293
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < health; i++){
;
	.dbg	line, "game.c", 292
	inc     _i
	bne     L0002
	inc     _i+1
	jmp     L0002
;
; }
;
	.dbg	line, "game.c", 296
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loseCheck (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loseCheck: near

	.dbg	func, "loseCheck", "00", extern, "_loseCheck"

.segment	"CODE"

;
; if(health <= 0){
;
	.dbg	line, "game.c", 310
	lda     _health
	cmp     #$01
	lda     _health+1
	sbc     #$00
	bvc     L0003
	eor     #$80
L0003:	bmi     L0009
;
; }
;
	.dbg	line, "game.c", 350
	rts
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 312
L0009:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 316
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 317
	jsr     _clearScreen
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 318
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	.dbg	line, "game.c", 319
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$09
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 320
	lda     #$04
	jsr     _pal_bright
;
; i = 0;
;
	.dbg	line, "game.c", 321
	lda     #$00
	sta     _i
	sta     _i+1
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 323
L0004:	jsr     _ppu_wait_nmi
;
; i++;
;
	.dbg	line, "game.c", 324
	inc     _i
	bne     L0007
	inc     _i+1
;
; }while(i <= 180);
;
	.dbg	line, "game.c", 325
L0007:	lda     _i
	cmp     #$B5
	lda     _i+1
	sbc     #$00
	bvc     L0008
	eor     #$80
L0008:	bmi     L0004
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 330
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off(); // screen off //make this better and fade in/out after saying you died
;
	.dbg	line, "game.c", 331
	jsr     _ppu_off
;
; clearScreen();
;
	.dbg	line, "game.c", 332
	jsr     _clearScreen
;
; which_bg = 0;
;
	.dbg	line, "game.c", 333
	lda     #$00
	sta     _which_bg
;
; mapPos = center;
;
	.dbg	line, "game.c", 334
	lda     _center+1
	sta     _mapPos+1
	lda     _center
	sta     _mapPos
;
; draw_bg();
;
	.dbg	line, "game.c", 336
	jsr     _draw_bg
;
; health = maxHealth;
;
	.dbg	line, "game.c", 337
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; stamina = maxStam;
;
	.dbg	line, "game.c", 338
	lda     _maxStam+1
	sta     _stamina+1
	lda     _maxStam
	sta     _stamina
;
; knight.x = 120;
;
	.dbg	line, "game.c", 339
	lda     #$78
	sta     _knight
;
; knight.y = 112;
;
	.dbg	line, "game.c", 340
	lda     #$70
	sta     _knight+1
;
; flasks = 3;
;
	.dbg	line, "game.c", 341
	ldx     #$00
	lda     #$03
	sta     _flasks
	stx     _flasks+1
;
; roll = 0;
;
	.dbg	line, "game.c", 342
	txa
	sta     _roll
	sta     _roll+1
;
; dir = 3;
;
	.dbg	line, "game.c", 343
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 344
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 345
	jsr     _ppu_wait_nmi
;
; ppu_on_all();
;
	.dbg	line, "game.c", 346
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 347
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ nextRoom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nextRoom: near

	.dbg	func, "nextRoom", "00", extern, "_nextRoom"

.segment	"CODE"

;
; if(knight.y < 13){
;
	.dbg	line, "game.c", 353
	lda     _knight+1
	cmp     #$0D
	bcs     L000C
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 354
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 221;
;
	.dbg	line, "game.c", 355
	lda     #$DD
	sta     _knight+1
;
; mapPos -= mapWidth;
;
	.dbg	line, "game.c", 356
	lda     _mapWidth
	eor     #$FF
	sec
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	eor     #$FF
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 357
	lda     _mapPos
;
; else if(knight.y > 221){
;
	.dbg	line, "game.c", 365
	jmp     L001A
L000C:	lda     _knight+1
	cmp     #$DE
	bcc     L000D
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 366
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.y = 13;
;
	.dbg	line, "game.c", 367
	lda     #$0D
	sta     _knight+1
;
; mapPos += mapWidth;
;
	.dbg	line, "game.c", 368
	lda     _mapWidth
	clc
	adc     _mapPos
	sta     _mapPos
	lda     _mapWidth+1
	adc     _mapPos+1
	sta     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 369
	lda     _mapPos
;
; else if(knight.x <= 3 ){
;
	.dbg	line, "game.c", 377
	jmp     L001A
L000D:	lda     _knight
	cmp     #$04
	bcs     L000E
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 378
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 236;
;
	.dbg	line, "game.c", 379
	lda     #$EC
	sta     _knight
;
; mapPos=mapPos-1;
;
	.dbg	line, "game.c", 380
	lda     _mapPos
	ldx     _mapPos+1
	sec
	sbc     #$01
	bcs     L000A
	dex
;
; else if(knight.x >= 237){
;
	.dbg	line, "game.c", 389
	jmp     L000A
L000E:	lda     _knight
	cmp     #$ED
	bcc     L0009
;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 390
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; knight.x = 4;//can't go less than 0, so have to be a pixel over
;
	.dbg	line, "game.c", 391
	lda     #$04
	sta     _knight
;
; mapPos=mapPos+1;
;
	.dbg	line, "game.c", 392
	lda     _mapPos
	ldx     _mapPos+1
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	sta     _mapPos
	stx     _mapPos+1
;
; which_bg = worldMap[mapPos];
;
	.dbg	line, "game.c", 393
L001A:	sta     ptr1
	lda     _mapPos+1
	clc
	adc     #>(_worldMap)
	sta     ptr1+1
	ldy     #<(_worldMap)
	lda     (ptr1),y
	sta     _which_bg
;
; draw_bg();
;
	.dbg	line, "game.c", 395
	jsr     _draw_bg
;
; drawSprites();
;
	.dbg	line, "game.c", 396
	jsr     _drawSprites
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 397
	jsr     _ppu_wait_nmi
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 398
	lda     #$04
	jmp     _pal_bright
;
; }
;
	.dbg	line, "game.c", 403
L0009:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

	.dbg	func, "clearScreen", "00", extern, "_clearScreen"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 299
	jsr     _ppu_off
;
; vram_adr(NTADR_A(0,0));//set to top corner
;
	.dbg	line, "game.c", 300
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; i = 0;
;
	.dbg	line, "game.c", 301
	lda     #$00
	sta     _i
	sta     _i+1
;
; vram_put(0);
;
	.dbg	line, "game.c", 303
L0008:	jsr     _vram_put
;
; i++;
;
	.dbg	line, "game.c", 304
	inc     _i
	bne     L0005
	inc     _i+1
;
; }while(i < 960);//32*30
;
	.dbg	line, "game.c", 305
L0005:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	bcs     L0008
;
; ppu_on_all();
;
	.dbg	line, "game.c", 306
	jmp     _ppu_on_all

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ win (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_win: near

	.dbg	func, "win", "00", extern, "_win"

.segment	"CODE"

;
; pal_fade_to(4,0); // fade to black
;
	.dbg	line, "game.c", 406
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; oam_clear();//clear sprite buffer
;
	.dbg	line, "game.c", 408
	jsr     _oam_clear
;
; clearScreen();
;
	.dbg	line, "game.c", 409
	jsr     _clearScreen
;
; loop = 0;
;
	.dbg	line, "game.c", 410
	lda     #$00
	sta     _loop
	sta     _loop+1
;
; vram_adr(NTADR_A(12,14)); // screen is 32 x 30 tiles
;
	.dbg	line, "game.c", 411
	ldx     #$21
	lda     #$CC
	jsr     _vram_adr
;
; vram_write(winTxt,sizeof(winTxt));
;
	.dbg	line, "game.c", 412
	lda     #<(_winTxt)
	ldx     #>(_winTxt)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _vram_write
;
; pal_bright(4); // back to normal brightness 
;
	.dbg	line, "game.c", 413
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loadRoomData (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadRoomData: near

	.dbg	func, "loadRoomData", "00", extern, "_loadRoomData"

.segment	"CODE"

;
; if(which_bg == 9) {numberOfE = 0;}
;
	.dbg	line, "game.c", 419
	ldx     #$00
	lda     _which_bg
	cmp     #$09
	bne     L0005
	txa
;
; else{numberOfE = 3;}
;
	.dbg	line, "game.c", 420
	jmp     L0006
L0005:	lda     #$03
L0006:	sta     _numberOfE
	stx     _numberOfE+1
;
; }
;
	.dbg	line, "game.c", 421
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ updateStamina (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateStamina: near

	.dbg	func, "updateStamina", "00", extern, "_updateStamina"

.segment	"CODE"

;
; if(stamina < maxStam && regenTimer <= 0){
;
	.dbg	line, "game.c", 424
	lda     _stamina
	cmp     _maxStam
	lda     _stamina+1
	sbc     _maxStam+1
	bvc     L000F
	eor     #$80
L000F:	bpl     L0002
	lda     _regenTimer
	cmp     #$01
	lda     _regenTimer+1
	sbc     #$00
	bvc     L0004
	eor     #$80
L0004:	bpl     L0002
;
; stamina++;
;
	.dbg	line, "game.c", 425
	inc     _stamina
	bne     L0007
	inc     _stamina+1
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 426
L0007:	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; }else{regenTimer -= 1;}
;
	.dbg	line, "game.c", 427
	jmp     L0014
L0002:	lda     _regenTimer
	sec
	sbc     #$01
	sta     _regenTimer
	bcs     L0014
	dec     _regenTimer+1
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 429
L0014:	lda     #$00
	sta     _i
	sta     _i+1
L000A:	lda     _i
	cmp     _stamina
	lda     _i+1
	sbc     _stamina+1
	bvc     L0010
	eor     #$80
L0010:	bpl     L000B
;
; oam_spr((i*8), 8, 0x90, 1);
;
	.dbg	line, "game.c", 430
	jsr     decsp3
	lda     _i
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; for(i = 0; i < stamina; i++){
;
	.dbg	line, "game.c", 429
	inc     _i
	bne     L000A
	inc     _i+1
	jmp     L000A
;
; }
;
	.dbg	line, "game.c", 432
L000B:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ selBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_selBtn: near

	.dbg	func, "selBtn", "00", extern, "_selBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_SELECT){
;
	.dbg	line, "game.c", 516
	lda     _pad1_new
	ldx     #$00
	and     #$20
	beq     L0005
;
; if (pause == 0){
;
	.dbg	line, "game.c", 517
	lda     _pause
	ora     _pause+1
	bne     L0007
;
; pause = 1;
;
	.dbg	line, "game.c", 518
	lda     #$01
;
; }else{pause = 0;}
;
	.dbg	line, "game.c", 519
	jmp     L0008
L0007:	txa
L0008:	sta     _pause
	stx     _pause+1
;
; }
;
	.dbg	line, "game.c", 526
L0005:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ stBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_stBtn: near

	.dbg	func, "stBtn", "00", extern, "_stBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_START && flasks > 0 && roll == 0){
;
	.dbg	line, "game.c", 501
	lda     _pad1_new
	and     #$10
	beq     L000D
	lda     _flasks
	cmp     #$01
	lda     _flasks+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L000D
	lda     _roll
	ora     _roll+1
	beq     L000E
L000D:	rts
;
; flasks -=1;
;
	.dbg	line, "game.c", 502
L000E:	lda     _flasks
	sec
	sbc     #$01
	sta     _flasks
	bcs     L0008
	dec     _flasks+1
;
; health += 4;
;
	.dbg	line, "game.c", 503
L0008:	lda     #$04
	clc
	adc     _health
	sta     _health
	bcc     L0009
	inc     _health+1
;
; if (health > maxHealth){health=maxHealth;}//Ensure no overheal
;
	.dbg	line, "game.c", 504
L0009:	lda     _health
	ldx     _health+1
	jsr     pushax
	lda     _maxHealth
	ldx     _maxHealth+1
	jsr     tosicmp
	bmi     L000A
	beq     L000A
	lda     _maxHealth+1
	sta     _health+1
	lda     _maxHealth
	sta     _health
;
; mapTiles[35] = 48+flasks; //Update the mapTiles to have the correct number of flasks
;
	.dbg	line, "game.c", 507
L000A:	lda     _flasks
	clc
	adc     #$30
	sta     _mapTiles+35
;
; address = get_ppu_addr(0, 0xF0, 0); //Address of the flask
;
	.dbg	line, "game.c", 508
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; buffer_1_mt(address, 7); // redraw just the flasks - no need to update entire screen + doesn't require the screen to be turned off
;
	.dbg	line, "game.c", 509
	jsr     pushax
	lda     #$07
	jmp     _buffer_1_mt

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ aBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_aBtn: near

	.dbg	func, "aBtn", "00", extern, "_aBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_A ){
;
	.dbg	line, "game.c", 435
	lda     _pad1_new
	and     #$80
	bne     L0011
;
; }
;
	.dbg	line, "game.c", 482
	rts
;
; if(stamina >= 1){
;
	.dbg	line, "game.c", 436
L0011:	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bmi     L0012
;
; }
;
	.dbg	line, "game.c", 482
	rts
;
; stamina-=1;
;
	.dbg	line, "game.c", 437
L0012:	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0005
	dec     _stamina+1
;
; switch(dir){
;
	.dbg	line, "game.c", 438
L0005:	lda     _dir
	ldx     _dir+1
;
; }
;
	.dbg	line, "game.c", 475
	cpx     #$00
	jne     L0007
	cmp     #$01
	beq     L0008
	cmp     #$02
	beq     L000A
	cmp     #$03
	beq     L000C
	cmp     #$04
	jeq     L000E
	jmp     L0007
;
; playerSprite=upAttSprite;
;
	.dbg	line, "game.c", 440
L0008:	lda     #>(_upAttSprite)
	sta     _playerSprite+1
	lda     #<(_upAttSprite)
	sta     _playerSprite
;
; swordSpr=srdU;
;
	.dbg	line, "game.c", 441
	lda     #>(_srdU)
	sta     _swordSpr+1
	lda     #<(_srdU)
	sta     _swordSpr
;
; sword.y = knight.y-8;
;
	.dbg	line, "game.c", 442
	lda     _knight+1
	sec
	sbc     #$08
	sta     _sword+1
;
; sword.x = knight.x;
;
	.dbg	line, "game.c", 443
	lda     _knight
	sta     _sword
;
; testCollision();
;
	.dbg	line, "game.c", 444
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 445
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=upSprite;
;
	.dbg	line, "game.c", 446
	lda     #>(_upSprite)
	sta     _playerSprite+1
	lda     #<(_upSprite)
;
; break;
;
	.dbg	line, "game.c", 447
	jmp     L0010
;
; playerSprite=rightAttSprite;
;
	.dbg	line, "game.c", 449
L000A:	lda     #>(_rightAttSprite)
	sta     _playerSprite+1
	lda     #<(_rightAttSprite)
	sta     _playerSprite
;
; swordSpr=srdR;
;
	.dbg	line, "game.c", 450
	lda     #>(_srdR)
	sta     _swordSpr+1
	lda     #<(_srdR)
	sta     _swordSpr
;
; sword.x = knight.x+16;
;
	.dbg	line, "game.c", 451
	lda     _knight
	clc
	adc     #$10
	sta     _sword
;
; sword.y = knight.y;
;
	.dbg	line, "game.c", 452
	lda     _knight+1
	sta     _sword+1
;
; testCollision();
;
	.dbg	line, "game.c", 453
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 454
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=rightSprite;
;
	.dbg	line, "game.c", 455
	lda     #>(_rightSprite)
	sta     _playerSprite+1
	lda     #<(_rightSprite)
;
; break;
;
	.dbg	line, "game.c", 456
	jmp     L0010
;
; playerSprite=downAttSprite;
;
	.dbg	line, "game.c", 458
L000C:	lda     #>(_downAttSprite)
	sta     _playerSprite+1
	lda     #<(_downAttSprite)
	sta     _playerSprite
;
; swordSpr=srdD;
;
	.dbg	line, "game.c", 459
	lda     #>(_srdD)
	sta     _swordSpr+1
	lda     #<(_srdD)
	sta     _swordSpr
;
; sword.y = knight.y+16;
;
	.dbg	line, "game.c", 460
	lda     _knight+1
	clc
	adc     #$10
	sta     _sword+1
;
; sword.x = knight.x;
;
	.dbg	line, "game.c", 461
	lda     _knight
	sta     _sword
;
; testCollision();
;
	.dbg	line, "game.c", 462
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 463
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=downSprite;
;
	.dbg	line, "game.c", 464
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
;
; break;
;
	.dbg	line, "game.c", 465
	jmp     L0010
;
; playerSprite=leftAttSprite;
;
	.dbg	line, "game.c", 467
L000E:	lda     #>(_leftAttSprite)
	sta     _playerSprite+1
	lda     #<(_leftAttSprite)
	sta     _playerSprite
;
; swordSpr=srdL;
;
	.dbg	line, "game.c", 468
	lda     #>(_srdL)
	sta     _swordSpr+1
	lda     #<(_srdL)
	sta     _swordSpr
;
; sword.x = knight.x-8;
;
	.dbg	line, "game.c", 469
	lda     _knight
	sec
	sbc     #$08
	sta     _sword
;
; sword.y = knight.y;
;
	.dbg	line, "game.c", 470
	lda     _knight+1
	sta     _sword+1
;
; testCollision();
;
	.dbg	line, "game.c", 471
	jsr     _testCollision
;
; wait(swdTime);
;
	.dbg	line, "game.c", 472
	lda     _swdTime
	ldx     _swdTime+1
	jsr     _wait
;
; playerSprite=leftSprite;
;
	.dbg	line, "game.c", 473
	lda     #>(_leftSprite)
	sta     _playerSprite+1
	lda     #<(_leftSprite)
L0010:	sta     _playerSprite
;
; swordSpr=null;
;
	.dbg	line, "game.c", 476
L0007:	lda     #>(_null)
	sta     _swordSpr+1
	lda     #<(_null)
	sta     _swordSpr
;
; sword.x = 0;//move it so enemies can't collide
;
	.dbg	line, "game.c", 477
	lda     #$00
	sta     _sword
;
; sword.y = 0;
;
	.dbg	line, "game.c", 478
	sta     _sword+1
;
; }
;
	.dbg	line, "game.c", 482
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bBtn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bBtn: near

	.dbg	func, "bBtn", "00", extern, "_bBtn"

.segment	"CODE"

;
; if(pad1_new & PAD_B){
;
	.dbg	line, "game.c", 485
	lda     _pad1_new
	and     #$40
	beq     L0003
;
; if (stamina >= 1){
;
	.dbg	line, "game.c", 486
	lda     _stamina
	cmp     #$01
	lda     _stamina+1
	sbc     #$00
	bvs     L0004
	eor     #$80
L0004:	bpl     L0003
;
; stamina -= 1;
;
	.dbg	line, "game.c", 487
	lda     _stamina
	sec
	sbc     #$01
	sta     _stamina
	bcs     L0005
	dec     _stamina+1
;
; roll = 1;
;
	.dbg	line, "game.c", 488
L0005:	ldx     #$00
	lda     #$01
	sta     _roll
	stx     _roll+1
;
; playerSprite = rollSprite;
;
	.dbg	line, "game.c", 489
	lda     #>(_rollSprite)
	sta     _playerSprite+1
	lda     #<(_rollSprite)
	sta     _playerSprite
;
; iFrame = 18;
;
	.dbg	line, "game.c", 490
	lda     #$12
	sta     _iFrame
	stx     _iFrame+1
;
; }
;
	.dbg	line, "game.c", 496
L0003:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ eBgCol (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eBgCol: near

	.dbg	func, "eBgCol", "00", extern, "_eBgCol"

.segment	"CODE"

;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 531
	lda     #$00
	sta     _i
	sta     _i+1
L0002:	lda     _i
	cmp     _numberOfE
	lda     _i+1
	sbc     _numberOfE+1
	bvc     L0015
	eor     #$80
L0015:	bmi     L001C
;
; };
;
	.dbg	line, "game.c", 582
	rts
;
; collision_L = 0;
;
	.dbg	line, "game.c", 533
L001C:	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	.dbg	line, "game.c", 534
	sta     _collision_R
;
; collision_U = 0;
;
	.dbg	line, "game.c", 535
	sta     _collision_U
;
; collision_D = 0;
;
	.dbg	line, "game.c", 536
	sta     _collision_D
;
; temp_x = E[i].x; // left side
;
	.dbg	line, "game.c", 538
	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     _temp_x
;
; temp_y = E[i].y; // top side
;
	.dbg	line, "game.c", 539
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 541
	cmp     #$F0
	bcc     L001D
;
; };
;
	.dbg	line, "game.c", 582
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper left
;
	.dbg	line, "game.c", 544
L001D:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){ // find a corner in the collision map
;
	.dbg	line, "game.c", 545
	ldy     _coordinates
	lda     _c_map,y
	beq     L0008
;
; ++collision_L;
;
	.dbg	line, "game.c", 546
	inc     _collision_L
;
; ++collision_U;
;
	.dbg	line, "game.c", 547
	inc     _collision_U
;
; temp_x = E[i].x + E[i].width; // right side
;
	.dbg	line, "game.c", 550
L0008:	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     sreg
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // upper right
;
	.dbg	line, "game.c", 552
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 553
	ldy     _coordinates
	lda     _c_map,y
	beq     L000A
;
; ++collision_R;
;
	.dbg	line, "game.c", 554
	inc     _collision_R
;
; ++collision_U;
;
	.dbg	line, "game.c", 555
	inc     _collision_U
;
; temp_y = E[i].y + E[i].height; // bottom side
;
	.dbg	line, "game.c", 558
L000A:	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     sreg
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     sreg
	sta     _temp_y
;
; if(temp_y >= 0xf0) return;
;
	.dbg	line, "game.c", 559
	cmp     #$F0
	bcc     L001E
;
; };
;
	.dbg	line, "game.c", 582
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom right
;
	.dbg	line, "game.c", 562
L001E:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 563
	ldy     _coordinates
	lda     _c_map,y
	beq     L000D
;
; ++collision_R;
;
	.dbg	line, "game.c", 564
	inc     _collision_R
;
; ++collision_D;
;
	.dbg	line, "game.c", 565
	inc     _collision_D
;
; temp_x = E[i].x; // left side
;
	.dbg	line, "game.c", 568
L000D:	lda     _i
	ldx     _i+1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_E)
	sta     ptr1+1
	ldy     #<(_E)
	lda     (ptr1),y
	sta     _temp_x
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0); // bottom left
;
	.dbg	line, "game.c", 570
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if(c_map[coordinates]){
;
	.dbg	line, "game.c", 571
	ldy     _coordinates
	lda     _c_map,y
	beq     L000F
;
; ++collision_L;
;
	.dbg	line, "game.c", 572
	inc     _collision_L
;
; ++collision_D;
;
	.dbg	line, "game.c", 573
	inc     _collision_D
;
; if(collision_D) E[i].y -= 2;
;
	.dbg	line, "game.c", 577
L000F:	lda     _collision_D
	beq     L0011
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if(collision_U) E[i].y += 2;
;
	.dbg	line, "game.c", 578
L0011:	lda     _collision_U
	beq     L0012
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if(collision_L) E[i].x += 2;
;
	.dbg	line, "game.c", 579
L0012:	lda     _collision_L
	beq     L0013
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if(collision_R) E[i].x -= 2;
;
	.dbg	line, "game.c", 580
L0013:	lda     _collision_R
	beq     L0004
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_E)
	sta     ptr1
	txa
	adc     #>(_E)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; for(i = 0; i < numberOfE; i++){//check enemy sprite collisions
;
	.dbg	line, "game.c", 531
L0004:	inc     _i
	jne     L0002
	inc     _i+1
	jmp     L0002

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ wait (int time)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait: near

	.dbg	func, "wait", "00", extern, "_wait"
	.dbg	sym, "time", "00", auto, 0

.segment	"CODE"

;
; void wait(time){
;
	.dbg	line, "game.c", 584
	jsr     pushax
;
; while(time >= 0){
;
	.dbg	line, "game.c", 586
	jmp     L0004
;
; drawSprites();
;
	.dbg	line, "game.c", 587
L0002:	jsr     _drawSprites
;
; updateHealth();
;
	.dbg	line, "game.c", 588
	jsr     _updateHealth
;
; updateStamina();
;
	.dbg	line, "game.c", 589
	jsr     _updateStamina
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 590
	jsr     _ppu_wait_nmi
;
; time -= 1;
;
	.dbg	line, "game.c", 591
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
;
; while(time >= 0){
;
	.dbg	line, "game.c", 586
L0004:	ldy     #$01
	lda     (sp),y
	tax
	txa
	bpl     L0002
;
; }
;
	.dbg	line, "game.c", 593
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; ppu_off(); // screen off
;
	.dbg	line, "game.c", 14
	jsr     _ppu_off
;
; pal_bg(paletteBg); // load the BG palette
;
	.dbg	line, "game.c", 16
	lda     #<(_paletteBg)
	ldx     #>(_paletteBg)
	jsr     _pal_bg
;
; pal_spr(paletteSp);//load the sprite palette
;
	.dbg	line, "game.c", 17
	lda     #<(_paletteSp)
	ldx     #>(_paletteSp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	.dbg	line, "game.c", 18
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	.dbg	line, "game.c", 24
	jsr     _set_vram_buffer
;
; draw_bg();
;
	.dbg	line, "game.c", 25
	jsr     _draw_bg
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	.dbg	line, "game.c", 26
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; mapPos = center; //setting the mapPos to the center of map
;
	.dbg	line, "game.c", 28
	lda     _center+1
	sta     _mapPos+1
	lda     _center
	sta     _mapPos
;
; regenTimer = timerSpeed;
;
	.dbg	line, "game.c", 29
	lda     _timerSpeed+1
	sta     _regenTimer+1
	lda     _timerSpeed
	sta     _regenTimer
;
; playerSprite = downSprite;
;
	.dbg	line, "game.c", 30
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
;
; ppu_on_all(); // turn on screen now in draw_bg();
;
	.dbg	line, "game.c", 33
	jsr     _ppu_on_all
;
; while (loop){
;
	.dbg	line, "game.c", 38
	jmp     L000C
;
; ppu_wait_nmi();
;
	.dbg	line, "game.c", 41
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 42
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "game.c", 43
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; move();//move the player
;
	.dbg	line, "game.c", 45
	jsr     _move
;
; nextRoom();
;
	.dbg	line, "game.c", 46
	jsr     _nextRoom
;
; testCollision();//sprite collisions
;
	.dbg	line, "game.c", 47
	jsr     _testCollision
;
; eBgCol();
;
	.dbg	line, "game.c", 48
	jsr     _eBgCol
;
; drawSprites();
;
	.dbg	line, "game.c", 49
	jsr     _drawSprites
;
; stBtn();
;
	.dbg	line, "game.c", 50
	jsr     _stBtn
;
; selBtn();
;
	.dbg	line, "game.c", 51
	jsr     _selBtn
;
; updateHealth();
;
	.dbg	line, "game.c", 52
	jsr     _updateHealth
;
; updateStamina();
;
	.dbg	line, "game.c", 53
	jsr     _updateStamina
;
; loseCheck();
;
	.dbg	line, "game.c", 54
	jsr     _loseCheck
;
; aBtn();
;
	.dbg	line, "game.c", 55
	jsr     _aBtn
;
; bBtn();
;
	.dbg	line, "game.c", 56
	jsr     _bBtn
;
; if (iFrame > 0){
;
	.dbg	line, "game.c", 58
	lda     _iFrame
	cmp     #$01
	lda     _iFrame+1
	sbc     #$00
	bvs     L0006
	eor     #$80
L0006:	bpl     L0005
;
; iFrame -= 1;
;
	.dbg	line, "game.c", 59
	lda     _iFrame
	sec
	sbc     #$01
	sta     _iFrame
	bcs     L000D
	dec     _iFrame+1
;
; }else if (roll == 1){
;
	.dbg	line, "game.c", 60
	jmp     L000D
L0005:	lda     _roll+1
	bne     L000D
	lda     _roll
	cmp     #$01
	bne     L000D
;
; roll = 0;
;
	.dbg	line, "game.c", 61
	ldx     #$00
	txa
	sta     _roll
	sta     _roll+1
;
; playerSprite = downSprite; dir = 3;
;
	.dbg	line, "game.c", 62
	lda     #>(_downSprite)
	sta     _playerSprite+1
	lda     #<(_downSprite)
	sta     _playerSprite
	lda     #$03
	sta     _dir
	stx     _dir+1
;
; while (pause){ //pause
;
	.dbg	line, "game.c", 65
	jmp     L000D
;
; pad1 = pad_poll(0); //read first controller input
;
	.dbg	line, "game.c", 66
L000B:	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	.dbg	line, "game.c", 67
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; selBtn();
;
	.dbg	line, "game.c", 68
	jsr     _selBtn
;
; while (pause){ //pause
;
	.dbg	line, "game.c", 65
L000D:	lda     _pause
	ora     _pause+1
	bne     L000B
;
; while (loop){
;
	.dbg	line, "game.c", 38
L000C:	lda     _loop
	ora     _loop+1
	jne     L0002
;
; while (1){ //prevents crashes on "win"
;
	.dbg	line, "game.c", 71
L0011:	jmp     L0011

	.dbg	line
.endproc

